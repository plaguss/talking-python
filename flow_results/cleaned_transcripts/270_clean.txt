On this episode, we're going to weave a thread through three different areas of Python programming that at first seem unlikely to have that much in common, yet the core will be the same throughout. I think this is a really cool lesson to learn as you get deeper into programming. In a great story to highlight it, we're going to meet Robin Kumar wrote Python code and data science tooling for oil rig tool manufacturers, a rocket company, and a hip multilocation. restaurant chain. This is talk Python to me, Episode 270, recorded June 17 2020.
Yeah, I think so as well see how the chicken act? I didn't see it at first, but we'll talk about that. I'm sure. Yeah, we absolutely.
Well. Yeah. So you've worked with? You know, I think a little bit different than a lot of software engineers. You've worked with physical things. Software? Yes,
yes. So much of that, I'd say none of my jobs that the software matter. Nobody bought the software, any my jobs, people bought the physical things. So right.
You didn't have like a user funnel or anything like that,
not for the software software was particularly all internal. So it's different dynamic.
Exactly. Yeah. I spent a lot of time actually building insurance software as well. And it's, it's actually pretty rewarding. Pretty fun. I think. I think so too. Yeah. Now before we get to that, though, let's jump in with your story and your background, how'd you get into programming in Python,
if we go programming, I guess I didn't have much of a choice. My dad was a network engineer in the in the 70s, and 80s, and 90s. So when I grew up, there were computers all around. In fact, there's just a computer when I was a kid, and to get to video games and things like that, I had to type stuff into a dos 3.1 terminal. So my parents always tell me, you see toddlers these days, like touching buttons on iPads and things like no buttons, but touching the screen and iPads and getting through it. That was I guess that was me as a kid. So before I knew what computers were, I was using them. And so that just progressed through my teenage years, I wouldn't call it programming, it's a more of it was just scripting like changing a value here changing a value there using a terminal and things like that. The programming in bonified came at my first job. I think that's when I really started diving in,
even though you don't call it programming. And you know, for me, I spent, like my high school years. And early college, I guess, as well. Being a really big fan and fanatic of computers. Okay, we would do all sorts of stuff on the internet. And you're back when getting on the internet was actually a challenge. You'd have to like, find a way to dial Yes. Yeah, you have this, you know, somehow set up telnet on Windows back then it you know, like, use like bunch of weird tools to like, piece it together. And I loved it so much. But I never really thought of myself as a programmer. But looking back, developing that comfort with computers just being like, quote, good with computers made becoming a programmer much easier. Because it's, it wasn't like, oh, the computers are weird things like no, no, I love them. I just never thought I could really program them. But apparently, this is how you do it. And it's not so bad.
Yeah, that's exactly right. Same experience I had.
Yeah. And I think typing in the little games actually takes it to the next level, right. But you mentioned floppy disks. I remember having stacks of like 3.25 or 3.5, whatever it was floppy disks. Those little hard ones, you know, floppy on the inside with a hard shell, I guess. Yeah, just to get one program on onto the computer. Like I know, people nowadays who maybe didn't really have to live through those in practical ways. Like a game you might want to play that could have been like 20 discs. And you'd have to sit there and would say now put in disc seven of you know, 20 like okay, right, right, right, right. Here we go. What a crazy time. Ah,
yeah, it's so funny. You mentioned that because that's that was my dad's I suppose maybe my first programming job is my dad would give me a stack of like the six Red Hat disks, floppy disks, or like, I felt was 3.1 I think it was like eight or nine. And he'd be like, all right, you're just gonna sit here and when it says push the disk, you're gonna push this button, grab that out and put the next one. And now we just sit there for like, an hour as a kid just watching the screen and watching like the loading bar and everything going and they'd be like, instead of floppy too, and I would put that one in, then my dad would come check on me do it. Do not do it. And that's my maybe my, the first like the first set of tasks that I remember where a supervisor was telling me to,
to program this computer. Yeah, you hear that? Yeah, crazy. And now that's like 10 seconds to download that. Yeah, exactly. totally different world. It's a fantastic world. But yeah, very different. Right, so this is how you got started in programming. How about Yeah,
so Python is probably bifurcating the same way. I think I remember seeing bits and pieces like Python one, even on some ICS, Mandrake Linux, which I don't even think is a thing anymore. But I had Python on there. But again, it was scripting, it was I remember, it was like something that said with the background or whatever, and Python would set the color. So I went into Python script and would change the color. So it went from from gray to green, what I liked as a teenager green or whatever, Python again, bonafide came in at my first job. And when I was thinking through programming languages, and I remember like Python, a lot of people say pythons. The reason I remember it was the easiest one to use and read. So I just picked that one and it it's stuck.
Yeah, yeah, I would say you've been definitely doing a lot of stuff with Python. After that, how about today? What are you doing day to day,
day to day, I have made two things I do with Python. So I have had the paid job, I work at sweet green. And I use Python. To understand how I'll say I'm going to say restaurants work and entrees and salad production goes and we'll get I'm sure we're going to get and all that. But it's a very data sciency focused area of Python. And outside of paid work, I am a contributor to our reason pi MC, which are two Bayesian libraries written in Python. So outside of work, we're spending a lot of time on GitHub and working with a bunch of these folks, bunch of folks around the globe to make these packages that are widely used by the Beijing community. Right.
So give us the high level story of how Bayesian analysis and whatnot, factors into Python and data science like I had maxima on for a while we talked about it a little more depth. That was a while ago.
Yeah. So high level visions, maybe seems like a cool new thing. But it's actually super old. The guy Thomas Bayes, he was born around the 1700s in England. So it's way even before computer existed existed. And he had this particular idea of probability. That's not the one that's taught in at least in American schools. It's where your your data is what you know, and is fixed. And everything else about the world is random. Versus the train of thought that usually goes on is frequentist mentality where your parameters in the model are fixed in your data is random, your dice rolls, random, your coin flips are random and things like that. The reason it comes into Python is that the formula is very simple. It's just four four terms. But it turns out, it's super hard to solve by hand, and you actually can't solve it by hand very well for large, classic problems. But if you combine some clever algorithms, and the base theorem together, you can start doing very, very complex thing. So Python has a, I'd say active and robust ecosystem where a lot of people are taking these these algorithms implementing in Python and making these nice libraries around them. So normal people like yourselves can use based here and not have to think about it too much. Right? It doesn't feel necessarily like statistics, it feels like a Data Science Library. And yeah,
exactly. Yeah. Making based on data science use, though is the tagline I should use. Yeah, for sure. That's a good way to put it. So tell me if this sort of understanding is correct. It feels to me like Bayesian analysis is a little bit better at making predictions when you can't run, like, say, the training on a bunch of data that you already have. Right? It's like one thing to say, Well, we've got 60,000 mammograms, and we know the outcomes of all of them. So let's train up a model on it. It's another to say, we're trying to build a rocket, we've never done that we need to predict how it's going, or how it's, you know, make predictions about how like the supply chain is working and whatnot, is that a good general rule of thumb? Or is my off the mark there,
that's the way that I got into base theorem was, as I was getting into Python, I saw these cool people doing stuff with neural nets, and AV testing and all that. But they're like, oh, you're Google and 10 million people visited your site. And in the last like, one hour, or you've got this image with a ton of information in it, and you've got 10,000 of them. They're all labeled, and I was sitting here at the time at SpaceX, I was like, I've only got like 30 rocket launches. Like I don't have actually the funny way, put this as if you got a psychic learn. There's a flowchart of machine learning workflows. And it's like, if you have less than, than, like, 1000 samples, you need to get more data. I'm like, What am I gonna do launch at 900 more rockets? Like, I can't AB test rocket. So some of the debates there. Oh,
yeah, that's awesome. And I remember there was this interview, this famous interview from Elon Musk after the third rocket failure. Yeah, I think the interview was on the fourth rocket launch the first successful one that they had. He was saying, basically, this was our last chance, right? We can't just keep launching these many, many million dollar rockets and failing or just having, you know, blow up indefinitely, right? It's it's not like a government funded thing, where we're just gonna do it till you get it working. Right? Yeah. You can't take that many shots at it.
That's true of all manufacturing. So and I should make the general disclaimer that I'm, I'm not representing any of the companies that I'm talking about. I happen to work for them. And I'm an individual. So these are all my experiences and opinions. But that's generally true of all manufacturing is we're used to trying in Python, or even programming General, you can try things out giving exception and just try it again, like no harm, no foul, but in manufacturing, it takes a lot of time and money to make these things. It's hard to go to your boss and say, I actually need to make 10,000 these randomly to figure out which 100 of them worked. He or she would just be like, get out. We don't wouldn't have the budget to make 100 a salad or whatever wrong just to see where the customers like them or not, that's not a good way to build a physical business.
Yeah, absolutely. So we're gonna touch on some of your experiences in a couple industries. We won't go into anything proprietary at SpaceX or anything like that. But we can talk a little bit. It's like some of the tools and stuff, maybe some of the workflows. But before we do, you know, you mentioned that you're working on a couple of open source libraries, you want to talk about those to each one for a little bit, just give a background and how they fit into this whole supply chain. Data Science story.
Yeah, exactly. So I work on, like I said, pi MC RVs. Those are both Beijing libraries. The Bayesian way of doing statistics and the in the tooling around it is fits very well with the type of work that I need to do in ways that like neural networks and random forests, and those don't always, but I mean, in particular to I want to say the the communities around those libraries, when we talk about Python, not just as the language but as a community was, was extremely nice. So I just, I find it professionally rewarding, I find it I need professionally, but then it's also just been rewarding to go in and give back to these libraries. I think some people forget. But Python is not a corporation. Like it's not like all these people making it make money or even even the library. So I use Python for a while. And I felt like you know what I need? This is the way that I can I can give back and be a part of it more than just using it at work. Yeah, I think that's really good. I wish more companies had a more direct belief that they should go back and support libraries like this. But it's really good that, you know, companies at least let people like you work on them. Because I've seen contracts or arrangements where it's basically like, I don't know, it seems almost like it should be illegal. But it's like everything that you think everything that you imagine everything that you might touch, even if you're not at work. We own that. Right. That's our that's our Yeah, yeah. No, if you have an idea for a new product that's anywhere near where you work conceptually, and you have it, even if you're not at work.
You know what? Because you're employed by us. That's all right. That seems just crazy to me. But I've seen stuff like that. And you could see how those kinds of arrangements would limit open source contributions.
Yeah, I know that it was actually a primary consideration in my last job search here, particularly when I was going to speaking interviews that like the Fang companies that are the famous ones. But some of the contracts were did like that, that any program, anything you do is our property. When I had the conversation with my prior boss at sweet green, I don't think people know this. But secret is becoming a very technology focused, actually, it is a very technology focused company. Now it's just increasing that way.
Tell me a little bit about it. Because I don't I don't know sweet green is something that I'm aware of, or at least is in the Pacific Northwest.
Okay, yeah. So sweet green is a restaurant company is probably what most people see it as the mission is sweet green, at a high level is to connect people to real food. So the purpose of the company is not necessarily technology, the purpose of the company is that get healthy food to people like sort of a, an accessible way. And part of that access more and more is, is technology. So part of that access is you are easily able to order off an app and get that delivered to you at your house. And so it's a very low friction experience. That means that you can order healthy food wherever you're at not just Domino's, or some of the fast food brands. But also this is the part that I'm in it also means that we're making it in an efficient manner. Like we're not wasting a lot of food, which we'll talk about in the supply chain stuff later, we're not under preparing food. So when you order, you don't have what you want. And that's where the data sciency sort of components come in is using the mass of the data to make sure that we have the right amount of healthy food. So every day when you Michael want to get whatever you want, it's there, it's available, and you can get it at your convenience. That's the idea. And technology just happens to be a huge enabler in that particular space.
Yeah, I definitely could see how that that works. So you were talking about the contracts and some of these overly possessive? I don't know. Yeah, cuz so. Yeah, yeah, exactly. So sweet greens a little bit more open to letting you work on things that basically support the business anyway,
they let me write it, they we write it as prior art in my contract, and they were accepting that. And so I was like, Alright, this is a company that seems to really want to give back to the community and things like that in their mission, but they enough so that they let me word in the contract, which is what mattered to me. And I was real thrilled about that. I don't get to spend a ton of time developing, like, per se, like, I still have a ton of work to do at work, but they were not aggressive about it, which was very, very nice. And I appreciate that. And that's why I work and
I think that's a really cool thing, and more companies should be doing it. Because ultimately, it's only going to help them if the tools that you use are better. And if you work on them in your spare time. It's not like you're charging them for you know, that PR that you did on the weekend. Yeah, they should just see that as a bonus. Right, I guess. But yeah, it's I know where the basic idea of, hey, you can't go create these other things while you work here. I mean, that kind of makes sense. It's sometimes you can't go create a competing company and like until you're ready, but at the same time, you know, it's corporations don't own people know. Anyway, right. So I bet a lot of them kind of treated a little bit like that, which is crazy.
Yeah, and I would say for the corporation. eliciting, like I'm more compelled to work at, like, let's say Microsoft, or some of these organizations like, particularly Microsoft these days, because it seems like they're allowing the developers to work on open source, things like that. And that is a huge pro to me, as a tech worker to go to a company that supports the community and doesn't just take, take the code and hide it away in their private repositories. Yeah, absolutely.
This portion of talk Python, to me is brought to you by century, how would you like to remove a little stress from your life? Do you worry that users may be having difficulties or are encountering errors with your app right now? Would you even know it until they send that support email? How much better would it be to have the error details immediately sent to you, including the call stack and values of local variables, as well as the active user stored in the report? With century This is not only possible, it's simple and free. In fact, we use century on all the top Python web properties, we've actually fixed a bug triggered by our user and had the upgrade ready to roll out as we got the support email, that was a great email to write back, we saw your error and have already rolled out the fix. Imagine their surprise, surprise and delight your users today, create your free account at talk Python dot f m slash century and track up to 5000 errors a month across multiple projects for free. If you use the code, talk Python, or one word, it's good for two free months of centuries team plan, which will give you up to 20 times as many monthly events in some other features. So create that free account today. So one thing I want to do is we're sort of thinking about some of these ideas here. I wanted to kind of get your opinion looking back on an episode I recently had, I recently had Jacqueline and Emily on to talk about careers in data science, this book that they wrote, and it's a super good book, I like sort of outlining the different types of companies that you might work at. And I can see sweet green being like one of the prototypical types of companies as well as SpaceX and other ones. And in there, they said, Look, data sciences, kind of three different areas, you know, threes, and maybe, maybe you can find different distinctions, but they broke it into like different areas that look, there's this, this group of people that does analytics, where they create dashboards and reports to deliver data, or there's people that do machine learning that create models and put them into production. And then there's decision science, which basically helps make product recommendations like Netflix and whatnot. And that sort of sounds like you've been a little bit in the analytics side of things, at least with that categorization.
So I'd say my career's progress through these, I did analytics at the start, because it's the easiest one and the most obvious one. I tried at the company that I was at, I tried using machine learning in NLP, which is my first company and SpaceX, but didn't wasn't really good fit there with the constant threat has been has been decision science. For me, particularly the thing I do the most now is use programming data to help somebody make a decision. It could be a person in a restaurant, it could be an executive, or it could be someone at my level, but how do I take all the information we have and packaged it in a way that helps that one person make a more informed decision about whether to buy or whether not to buy whether to do this whether to do that?
Yeah. And I guess also, one of the main themes is where the supply chain side of things, right, so let's maybe just set the stage of the three different places where you went through some of these experiences, right? Yeah. You started out in heavy manufacturing, where you were working at a company that built tools for oil and gas exploration or something like that, right?
Yeah. Yeah, that's exactly right. Okay.
And then there's a little company in LA called SpaceX. Yeah, no, no lot of people have heard of it
hasn't been on the news. Yeah, yeah. It's rocking. It's like,
Fourth of July all the time. Pretty awesome. And then sweet green now. Yeah. So like, maybe give us a sense of the types of stuff that you did each of those companies? Yeah, the high level stuff. And
I think it follows like my career progression and sort of what the framework that you laid out earlier. So first job was NFV. And that's, of course, when I was the most junior with Python, that was largely just analytics. How many parts that we made yesterday? How many parts did we make today? What parts did we not make yesterday that we needed to make today? I'd say this was the the nexus of my my programming, the company and movies is like a fortune 100 large company, it's been around for 150 years. So people are used to doing things the way they've been doing them for a long time. So I was in charge of this manufacturing operation. And you would have the list of 20 things you need to make yesterday from the Oracle system, you would have the list of 20 things that you need to make today and some of those would be the same, and some of them wouldn't and what would happen is that person would print out would have yesterday's list from yesterday, they would print out today's list and with a highlighter, they would put them down on a table and highlight the ones that they finished and the ones that they didn't finished and that's the way they would build the reporting to say here's what I completed here's I didn't complete and there was looking at those like no way like you can do this with but you have to do this reprogramming, like just spending 10 minutes on this a day. My job is to make you more efficient, and there's a 2030 people doing this across the company every day, like, let's just write a Python program that just imports this does a set subtraction, and from yesterday today, and that's where you go. And that was the first application that I had was programming can be used in this context, it just makes things so much more efficient, less error prone, and just get these help these folks do the thing that matters, which is build parts and not sit there with a highlighter all day. Right? And that's
not a super deep programming challenge, per se. Right. I mean, set and set subtractions even built into Python, right? Yeah. But at the same time, having that automated having that real time visibility, having it, you know, be sure that you're not missing something, that's great. Yeah,
it's huge. And I'd say, even if you don't listen to the rest of the podcast, or any other episode, talk Python, like, there is a huge amount of work that you can just do with the Python that's pre installed on your computer, and the standard library like import CSV. And there's a ton of work that can be done at a time utility can be added just with that. I think, Scott hanselman had this blog post that I really like called dark matter. He said he has this thing called Dark Matter developers. It's Yes, it's a type of thing. Like there's so much of this work that's just out there. And people are thinking about neural nets, and Bayesian and, and pi tests and all these like not big things, but like all these
components, easy things, developer tools, and companies and infrastructure and whatnot. Right?
Exactly, yeah. And you can just do so much just by typing Python in your terminal and getting build center library and just going like, Don't feel like you have to jump in everything all at once. Like, there is a ton of opportunity just at that level. And I call it like Python scripting almost not even maybe not even programming just a single
Python file, right? It might not even have a function. Yeah, doesn't even need to have a function. This one didn't have a function it was import CSV, got the CSV and subtraction and print to a terminal. That was it. That is super cool. I do think that there are so many of these scenarios are low hanging fruit of, you know, this thing, I do it all the time, it's error prone, it's slow. And if I didn't have to do it, life would be better or fit would just automatically happen. And I've actually seen some of those things in my business around, say running the online courses and stuff. There were some things where it was so painful. I'm like, you know, this takes me two to three hours to get a course ready to just go through and find like, how long is each video? Right? Yeah, database. Yeah, all these things. And, you know, I was thinking, well, should I like find a contractor? Somebody who would go through and do all these things? And then what is wrong with me? Why don't I just write a program. And now all of these types of things, they take seconds, maybe. And it's automatic, and it never makes an error. And it really was, you know, like you said, 10 to 20 lines of code. And so there's things even if you're a programmer, sometimes you just don't think like that, actually, I could automate that. And then it would be without error. And it would be instant, basically. And so there's a ton of low hanging fruit, but especially if you're getting into programming, I think there's a lot of options for those. Yeah. And I would say this is where I got hooked on Python. Because when you start with Java, for example, you the first thing you hit with is like his main thing. And so I think Brett said this in one of the podcasts, Python fits the human brain, why my human brain at the time was particularly manufacturing, like, what the hell is what is main? Like, why am I even dealing with this? Where's the Python I could jump straight into, okay, I've got this list. And I've got this list, and I can subtract them. And it fit my way of thinking. And I've just found that Python has just been like that. It's like, just enough when you need it. And that was really the ramp into that particular language and why I've been in it so long. Well, you look at the growth of Python. And I think the reason you know, people compare different languages like, well, Java, it's statically typed, it has these interfaces, and it does this and Python is like this, it's, you know, dynamically typed, but it can have optional typing, you get treated, right, I think you can get over think you will get over analyze, I think a large reason why Python is so popular is that story, you just hold repeats thousands of times a day. And you know, you were like, this is not that complicated. I just need to do this simple thing. It's gonna let me do this thing. But I'll bet you the stuff you right now is way more involved, right? Like, it's slowly pulled you in. And it didn't make you learn all the computer science, things like interfaces, and compilers, and linkers and classes just to do that thing. But probably at some point, you're like, Oh, we probably need a function. So I can vary this. Or maybe I want to use this other places. So let's make it a package. And like it slowly drags you in deeper and deeper. And I feel like so many people get started not even thinking of I'm a developer, they get started. I didn't need to do computing. And like, once you're pulled into Python, then you're kind of in its gravitational field or whatever.
Yeah, mine was I'm just tired of doing this stuff in Excel. So how can I do this? Outside of Excel and Python was like that next. Next step.
Yeah. So you talked about the automate the boring stuff a little bit. We get back into that some more but setting the high level SpaceX what kind of things were you doing there in the supply chain?
Yeah, so me my job was to just deal with one manufacturing periods. It's This part goes in this part goes out. When I got to SpaceX and progressing Python more, my job was now to think about the entire supply chain, I don't think about one part anymore. My job is to think about every part that goes on to, in this case, the rocket, and figure out when they need to get to the right place at the right time. So my thinking went from a small area to a very, very wide, wide area. And where that word Python came to fit with me on that one is, it wasn't just subtraction anymore. Now I needed to I had to think at a higher level. So think about when you guys see a racket on one of the live streams that SpaceX has, or what have you guys see one rocket, but the way I see a rocket at a big level is, I'm just going to go through this real quick, there's the last dragon launch the Dragon capsule, to make a Dragon capsule, you need a trunk. And actually to make the whole dragon you did the trunk in the capsule, that's just the top, then the second stage is that middle piece, and you need an engine and you need that second stage, tank. And then for the booster. The bottom part that's got grid fins is four of them. There's legs, there's, there's multiple stages. And so suddenly, this one rocket starts turning into like 100 pieces, the pieces are huge, the smallest piece that I had to plan with my software was the size of a refrigerator, and then the rocket gets to 15 stories from that. So yeah, how do I take not only this one rocket, but every single rocket that SpaceX is building, and help someone play what I like to call rocket Tetris, both in time and in space that like this piece, this humongous piece is going to be here. So we need to move that this humongous piece here, then we have the space to move this other piece here. And over somewhere else. We're moving in all these other things and like linked together, all of these just enormous rocket has to come together. And my job there.
Sorry, that sounds like an amazing optimization problem, because you've got this huge factory, but the rocket pizzas have to be assembled in different areas. But also you've got to have the individual parts arrive on time. You got to have them but yeah, just go buy like three extra engines.
Yeah, right. Yeah, they take a while to make turns out takes it takes a bit of time to make a rocket. So you got to think ahead. Yeah, yeah, it was a and this is an interesting one, because and this is I should mention this, Python wasn't doing any optimization. But what Python would do is, I built this tool that one of my friends there now, you can put in all these inputs. And it comes up with what the linkage is of what's called the wording this, like, I'll use a programming term, but the dependency is the graph of the graph of dependencies, when certain things would happen if you have certain lead times and certain, certain constraints and whatever. So he would run the program, he would see that with this particular set of inputs, with this lead time and this assembly in this in this, we're not scheduled to have a rocket launch till like February or something like that, because that's not going to work, we need to get it earlier we need or whatever. And so he would then change some inputs, because he has the human knowledge, put that into the calculator, the calculator would then do the same graph explosion and time explosion. And he would get a new set new set of outputs and be like, okay, I can work with this. I can't work with this. So it was him working back and forth with the program to run through the scenarios. And then once he had the scenarios that fit the objectives, he would then bring it up to, to the managers and things like that. So the program, he was like the human optimizer, but he used the program to quickly lay out the Tetris Board of what things
would look like, right, right, I'd say maybe you identify that there's something unexpected, that actually seriously delays the production, right? Like, oh, there's a specialized hose that takes you know, liquid, whatever right over here. And it actually that's the thing that takes so long to get or to, it's the one thing that holds up a big part of the construction. And so let's make sure there's no delays on that.
Yeah, exactly, you would see, that's called the critical path. in manufacturing, it's what is what is going to take you the longest time and delay the whole project, you're always trying to keep an eye out for those types of things. If we go back to the code itself, I think we talked about the earlier example, it was just sets and I was like good to go, just the built in types. But now, I there's no built in texture rocket. So Python grew up with me, or I grew into Python. And like now I could define an object that was like, here's this booster object. Here's the interstage object, here are the attributes associated with it. And I could start like, again, like what Brett cannon said, I could start writing Python, I can start writing a layer of abstraction on Python itself that fit my rocket brain. And the way I think about rockets and the way we thought about rockets, and just using objects, classes, methods, modules, and like that next layer of Python, at this point to its This is all deterministic planning, you know what's gonna happen precisely, or you at least assume you know, what's gonna happen precisely. So with the early example, you knew, which was what was completed and what you needed to do deterministic, its basics as well, the software had built was deterministic, you just say that it's going to take 10 days, and that's something you're rolling with, or it's going to take 15 days, and that's the assumption you're rolling with. Yeah,
yeah. Cool. And, you know, maybe just stepping back for a second, like, what do you think about what SpaceX has been able to accomplish?
I mean, I think it's amazing. I am super happy and super fortunate to have been an employee of the company and been there with the time I've had so one of the best experiences of my life for sure. And I think if we go into space a little bit I think everyone listen this podcast, you know that within the next decade, your you could be an astronaut, like the goal of the company is to make you an astronaut, where you could go into space yourself either for maybe either sort of made these missions that the one that the One Japanese pushes bottle. But the point of the company is to get to Mars, like get a million of us to Mars. And so it's super inspiring to think about, there's a group of people that you can that most people here could be a part of that can you can contribute to that mission. Yeah,
and get yourself there. I mean, it's such a wild thought to think I don't know how many people have gone in space, but it's got to be in the hundreds, you know, as I speak, right, and to think, you know, that's just, we're gonna double it, it just one flight. This portion of talk Python to me is brought to you by linode. Whether you're working on a personal project or managing your enterprises infrastructure, linode has the pricing support and scale that you need to take your project to the next level, with 11 data centers worldwide, including their newest data center in Sydney, Australia, enterprise grade hardware, s3 compatible storage, and the next generation network linode delivers the performance that you expect at a price that you don't get started on the note today with a $20 credit and you get access to native SSD storage, a 40 gigabit network industry leading processors, their revamped Cloud Manager cloud not linode.com root access to your server along with their newest API and a Python COI just visit talk python.fm slash linode when creating a new linode account, and you'll automatically get $20 credit for your next project. Oh, and one last thing they're hiring go to lynda.com slash careers to find out more let them know that we sent you I think the real magic to me or what SpaceX has been able to do I want it's kind of interesting to see a private company just come along and and do that. But the real magic to me has been the reuse and the landing. Right? Not that we're gonna take this thing and just throw it away every time but yeah, comes you know, not something thanks destroyed, but something more like a 747.
Yeah, well think of it like a week till it. Every time you run your program, it just deletes itself, how many programs that you write. All your Python programs are self destructing, be a lot harder to get the stuff done. And I guess while we're on the rocket industry in general, like I come from the supply chain, but Python is used extensively throughout the entire rock industry like it's used to calculate trajectories of rockets. It's used to calculate the mass of rockets, which is particularly important because you got to get it into space. It's it's used in so many contexts across somebody disciplines in the rocketry industry across so many companies that I think all the core developers of Python should be pretty, pretty proud. I don't know, Guido was thinking that his ABC programming language would be used to make rockets someday and get humanity into space kind of far stretch, but it's happening every day.
Yeah, that's really awesome. Yeah, I think Python has been used for a lot of things that nobody predicted it would be used for.
Yeah,
definitely. It's a good fit. I'm not saying it's not a good fit necessarily. It's just like, it's a great fit. I think, actually, historically, one of the challenges of going from Python two to Python three, that the core developers and Guido said this himself a little bit. When I talked to him quite a while ago on he was Episode 100. Even probably, anyway, one of those shows I had him on quite a while back, said something like, the one of the big challenges was we underestimated how foundational Python and its libraries were for so many people, they thought, Oh, well, we'll make this change to Python to upgrade it, and people will just adapt, it didn't realize like whole banking systems are built on top of the details of this light, or these all these have super important libraries that actually support so many different things depended on the exact details and making these relatively minor changes was a lot harder because of those sort of dependencies.
Yeah, I see a victim of their own success there, right.
Yeah, exactly. Exactly. So I think a lot of people don't really have that much of a visibility to the true scope of how much is built with Python. And how much depends upon on these libraries that people have created. I would agree. Yeah, absolutely. Yeah, I found a resting place. I don't even heard of it called the open source aerospace computing, okay. And it's for simulated rockets. It's got a bunch of different Python modules to do so. like six or seven different things for like simulating high power rockets endeavor. So I'll put that into the show notes. People can you know, it's that sounds really fun.
That is, I'm gonna take a look. That's all they realize that See, I'm learning stuff right now about Python and in the aerospace industry and
on this podcast. Exactly. Alright. So over there, you had these complex but deterministic calculations? Yeah, it was SpaceX. And they're doing super, super cool stuff. I looked over on SpaceX. I think this is a few months ago, the last time I looked though, they had 92 different job openings for Python.
Yeah, that you got that speaks to itself, how much that language is used?
Yeah, absolutely. There wasn't a lot of visibility into exactly what was happening there. But yeah, that's not 92 positions, that's 92 different roles they're trying to fill, which might be more than one person for each one. So pretty, pretty interesting. And then now you're working more in the forecasting world with sweet green, right?
I would say and this should I still do all the level one stuff that I do. Maybe the instruction, I think of it more like a pyramid, I still do a lot of that. I think when people talk about data science, you get this idea that like, oh, everyone's out there doing amazing data science. I don't know if your panel mentioned this at all. But most data scientists spend a lot of time cleaning data and automating the boring stuff, it's surprisingly little amount of time is spent, you would guess in the in the cool math portion of it. So it's more like a pyramid for me, I still have a huge wide base of like, automate the boring stuff, because that's super important and easiest way to get value, I still have a middle layer that's there of deterministic type of calculations. And now through self learning, and through the help of the Bayesian community, particularly the PI MC and RVs guys who've been so nice to train me up over time. And let me join, I'm doing some amount of data sciency tasks, some of that's forecasting, some of that's we do is a is optimization, it's across the board. But it's really, again, the point isn't whatever way we can use data to help connect people to real food is we're going to do that. If it's automate the boring stuff, we're doing that if it's if it's a forecasting model, then we're gonna figure out how to do that. But the idea is, how can we use programming technology to fulfill this fiscal mission? It almost seems like the food story would be
harder than the space story, which is a bit of a cough today. So it sounds a little contrary, right? Like space. And space science seems so hard. And food spoils, right? Like, if it's five days instead of three days, maybe you can't eat that, right?
Yeah. So this is if we, if we ignore the space or free part of it, if we just talk supply chain for a second, which interesting enough is I don't have any great programming all my degrees aren't mechanical and supply chain, SpaceX, the demand was relatively certain, because you don't have that many rocket launches. There's a lot of nuances and stuff like that. But there's only so many customers at sweetgreen, just like 10s of thousands of people that could come into any of the locations on any day. So it becomes a much more challenging problem to figure out which salads people are going to want or which ingredients people are going to want when they walk into any speaking location and across the nation. So, and to your point, you can't just prep everything, because it'll spoil and then it'll all go bad. And then you're not connecting people to real food, you're just wasting food, which is the absolute opposite of what we want. So how do you just get the right amount of everything? And that is very, very non deterministic? I'll tell you that. People are not deterministic. I can't, I can't predict what you wish someone would want on any given day.
Yeah. Or when there's going to be some event that you didn't realize WWDC happens to be right near one of the restaurants or something like that. Mm hmm. Yeah. Interesting. So what was what are some of the tools you're using over there to make these estimations?
Yeah, so this is a lot where when we talk about Bayesian stuff, this is not that everything we do there is Bayesian, but like, the Bayesian scope of data science lets me work with smaller data sets and more uncertainty. So lets me, it lets us figure out within certain bounds, how much of a particular thing might be used on the day like that's an example of a type of problem that I could solve that sweet green is actually in supply chain, there's this idea, this model called this the single period model or the salvage a model. What it is, is the classical example, from from actually 1888 is your news vendor, like your neural news, girl, and news boy, and you can buy so many newspapers in the morning, you could buy 10, you go 15 by 20. But by the end of the day, you have to sell them all because if you don't sell them to trash, no one's gonna buy a daily newspaper. So
that one newspaper with the headline, you should really get that one for free. Yeah, it was super. That doesn't happen
today, it doesn't happen very much. So how do you decide how many newspapers to buy? Because they cost you money, they maybe they cost you 25 cents to buy, and you can sell it for 75 cents, what's the optimal amount to buy? And traditionally, the way this problem is solved be like, Oh, well, you just sell, you just have 10,000 days of demand. And you just take the average, and that's how many newspapers you buy. But now you spent 10,000 days making sub optimal or in optimal decisions. So evasion, senseless media is like, well, if I have five days, newspaper demand, okay? Even though it's not a lot of data, I can say that with 17 2021 and 22, and 25. Sales, I should maybe by 20. And but the uncertainty bounds are, there could be 16 sales, it could be 28 sales, and I can make a decision of what to do there. And as you get more and more data, if there's certainty in your demand, that distribution will shrink over time. And that's the real trick for me with with Bayesian type of analysis is I, I can work on small data sets, I preserve uncertainty, which is critical in business decision making, right? I don't want to go in there and say the mean is going to happen in the mean doesn't happen. Because the mean is never going to happen, almost ever, never happened. So I'm going to go in and say it'll be somewhere between this and this value. And the part that we haven't talked about is that Bayesian stats, in particular, let you build a a very nuanced model to capture what you know in your head. So random force in neural nets, there's very little you can do besides just tuning some hyper parameters, the algorithm is relatively fixed. But with Bayesian models, you can say I'm in newsvendor, and I have demand for New York and demand for Boston. And I know which day of the week it is. And I know that on event days, you might sell more newspapers, and you can build this graph, which is the probabilistic programming language part of it. of probabilities. That helps you get a more, I'll say precise, estimate even though that's not the right statistical term, but helps you build a more nuanced model that gets you to a better, better estimate. And that's the real power in it for me, is the uncertainty and the, and the ability to encode human dependencies into the programming language, in this case into pi MC three, for example.
Right, right. Well, in preserving that uncertainty and communicating that is super important, right? Because it's one thing to say, we think we're going to, you know, meet this deadline or sell this many salads or, you know, sell this many cars. And you go to plan around it, if that's, well, here's the number and there's a small variation. Just using hammer, there's, like, yeah, we want to approach that from an investment perspective, super different.
Exactly. That is the key portion. That's the thing that like standard linear regression does not get me gets me the mean, but it doesn't tell me how far off I might be. Yeah,
yeah, for sure. So it sounds to me like you've been doing a lot of research into this whole Bayesian side, maybe even book level research.
Yeah. So I finally just fell into the pool of Bayesian research. The Open Source story is I saw pi MC and RVs. And I figured, hey, why don't I just open a pull request for like, two typos and, and Chris Fonz back was so nice to merge it immediately because this was great. This is awesome. I'm just contributing to open source. And then they just kept going more and more. And they started letting me contribute more and more code. And I've just been talking to those guys. And over the two years, me and a couple of the other guys who are working on pi Stan arvesen pi MC three. So all these are our Python, Beijing libraries were like, you know what, we think we can write a book that explains how to use Python to do to use Bayes theorem with a much more modern twist on it. So you got a lot of Bayes theorem books from like the 1980s in the 90s, and things like that, you've got a couple of introductory books.
So as long as those original ones have to be like super theoretical, right?
So it's interesting, they're theoretical, prior to the 90s. Because there were not very many algorithms to solve Bayes theorem at the time, you were constrained to what were called conjugate models that you could solve by hand. I don't know if he talked about this, the other podcast, but this algorithm called mC mC, sort of hit the streets in the late early 90s. It was a just bust the door down on computational base, they're like, turns out this particular algorithm, if you use it in particular ways just works really well. And since then, people just make been making it better and better and better. And so there's actually different variations of this now called a Hamiltonian Monte Carlo. And within that, there's this subset called the no U turn sampler that just did great on solving, not solving but doing Bayesian inference. But there's a lot of a, we think there's a gap where we can write this book to help people understand how to use it in a more more advanced ways. So for reference, a valda, Martin wrote this book called Bayesian analysis in Python. He's actually one of the co authors on this other book. It's an introduction to how to use Bayes theorem in Python. And so if you don't know anything about Bayes theorem, I would just say go buy this book. And you can start learning Python and start learning based on sort of in the same book, but it's an introductory level. So he only goes so far. There's more layers to base here. Things like Gaussian processes, Bayesian regression trees, decision analysis that we're covering, specifically in this intermediate level book that we're hoping to publish by February.
Awesome. Yeah. So you have a new book that you've co authored, Bayesian modeling and computation in Python, and I got a just a super brief look at it. It looks pretty interesting. It looks like it's pretty approachable. It's got a lot of nice graphs and pictures, and a little bit of theory, but then here's the library call that you make to do that thing. And so it looks like it has this really nice, practical aspect to it. So yeah, I hope, hopefully, the book takes off and does really well, because it looks useful.
Thanks.
Yeah, yeah, I will put a link to something, whatever you think is the right thing to link to in the show notes so people can sign up to get notified or or whatever. Okay, yeah, I'll call it something. Yeah. Perfect. So one of the things I think that was interesting, I want to kind of dive into a little bit with you, here is a lot of the things that you talked about were pretty straightforward, at least in the early days, you know, you talked about automating, like, basically, comparing csvs and getting a nice output and whatnot. Yeah, so much of the talk out there is, you know, here's the cool architecture of what Google is doing. Or, here's how Instagram upgraded their huge Django production, from Django, one to two and Python two to three. Yeah, and so on. And people focus on that, and I think they get excited about it. But at the same time, so many people can just solve these little problems for themselves, right with. And really, it doesn't have to be these huge engineering efforts to get a lot of value out of it. Right.
Yeah, I agree. Yeah. I think
there's just a lot of opportunities for people who are a non programmers sort of level up what they're doing with a little bit of Python. So yeah, it sounds like your story. The Arc of your story tells that as well.
I tend to think I think, yeah, you're right. There's a lot of publicity and press around. The big things, huge installations, like the massive sorts of stuff. I think you'd be like crazy In your whatever you see like the Chef's Table on Netflix, and it's like all the people that are like the best and whatnot. But that's what you see a lot in blog posts and articles and on Hacker News and whatnot. But there's a whole class of people like me that are like, making mac and cheese on a stove and and we're just fine. Like, the snows the same? Cheese. Yeah, you get better over time. Yeah. So you know, don't ever say I hope people don't get intimidated when they start seeing terms like, and I use PI test all the time now, but they don't they see Docker pie test, packaging, pi pi, like all these acronyms and stuff that that are now prevalent, for good reason. But they're not prevalent. I hope they, they realize that, you know, you can just fire up a Google collab these days, or just get your basic thing done. And that like you're in a ok program like that is that is awesome. You creating value. And that's what matters. Not that you have a multi cluster Kubernetes thing at the edge with instant retry fails. They're all you know, all these these terms that get thrown out like
these days. Yeah. And the whole reason I bring it up is I feel like there's a lot of people who are newer to the programming space, they see these big, impressive stories of technology and whatnot. And they feel like, well, what I'm doing isn't good enough. How do I go learn Kubernetes so that I can also do it the right way. And while the right way, is very different. We were talking about racing before we hit record. Yeah, if you're in f1, and you have an insanely competitive environment, like what you're going to need to do to make the brakes work is very different than if your minivan is going to go on a road trip, right? Like you would never go do what they do to your minivan, because it just doesn't make any sense. And so like, I think I just want to encourage people to just a lot of time, not everyone, but a lot of folks to remember, they're not Google, they're not Facebook, they're not LinkedIn. And so the simple solutions are not necessarily just a compromise that they can make, they might be actually the better solution than what some of these fancy tech companies are doing for their situation,
I actually want to work that even stronger is the right way is what works for you to do the thing you need to do. And the thing that Google is doing, most likely is the wrong way for you. Because if you're not at Google, like terabyte scale, like doing what they do in your for your Excel file is not what you need. Like if you're running Hadoop on your Excel file, definitely the wrong way. Don't Don't fire a PI spark to analyze your your Excel file. Like there's a right way. Whenever Yeah, yeah, exactly. So. So don't always take what Google and Instagram everyone are doing as the right way for your situation. Definitely inspiration for what the language can be in that there's really no In my opinion, no barriers on what Python can do. But I would say don't get intimidated, like look around, see what surrounds you that's automatable or boring, or that you dislike that you just find tedious and just start start with that. And if all you do is make that script, and that's a Python success story, in and of itself, and you should be proud of Absolutely,
absolutely. Now another thing that I want to talk about really quickly, before we wrap this up, I've had this experience, and I know that to some degree you have as well. It sounds like those three environments are super different. It sounds like helping people work with predicting or understanding what tools they've made in their supply chain and what ones they still got a produce, go into working with predicting rocket construction, content predicting salads, like it sounds like, as a preparation as a set of skills, you need to learn to go work with rockets versus salad. It seems like that's really, really different. Right? But in practice, I would bet that the actual coding and the tools are not as different as it would sound.
Yeah, I think there's just there's just a lot of, there's a lot of commonality. And so this is another inspiration I want people to take is that the things that tech companies do, you can absolutely bring those into your business like almost every I'm, I want to go as far as to say almost every business at this point, could could use Python. So don't feel like just because you're now working at Google, Facebook, or one of those large companies that you can't find a use for programming at your job. And that's the experience that I found. And Avi is an example of that company's been around again for 150 years. So they've been building stuff way before computers like, or even a thing, at least electronic computers, and definitely before Python was around. But still at that company, there was an opportunity to use Python to make that company that much more efficient in certain ways. And that same skill set, then translated to what people think is the more high tech company, which is SpaceX, like the same basic idea of taking data processing in a way, and then placing it in front of users in a way that they can think about it was relevant at SpaceX. And to be frank, after SpaceX, I didn't realize that would be useful in the restaurant industry. But after a couple interviews, I realized Holy crap, it's the same ideas, the same tools as things that I've been working on things that this company is already already doing. The manager that I now work for, had already been using Python for two years to do a very similar sort of stuff. So even for me, I had to make that mental leap. But hey, the stuff that the Python that I use in manufacturing companies is the same style and thinking that I can use at a restaurant company and it's equally valid and it works out super well. So I could just like quote unquote, import my knowledge of environments and in Jupiter lab and bass serum and all the things that I picked up along the way To use that speaker, it's so interesting because it, you know, for looking in from the outside, it seems like it would be absolutely not the case. But it Yeah, it really is. And like you said, it's you almost have to live through it to experience it. The the one, the example that I have for that is I did training software developer training in person training for quite a while. And in the course of a month, I had taught a course to developers at a hedge fund in New York City, who were doing high speed trading type of stuff. And I also taught a course to engineers at Edwards Air Force Base. Those two experiences, I'm like, you know, what these people need to know, like 90%, the same thing. It's just that little 10%, where you take that knowledge and apply it to, you know, low latency, stocks, stock trading versus reliable airplanes, or whatever it is you're trying to do. But like, mostly, what you need to know is actually really, really similar, which blew my mind. And you know, I would have the same experience between like, restaurants and rockets, right? Yeah. And even for me, like for Python, it's the stuff the Python you need to know, for web development. Like a lot of it is the same Python you need to know for data science. And so like, that's been a huge plus for me. And using in using Python was like, Okay, I know Python for data, because that's what I do, I now need to build a web app or something like I need to build a static blog from for myself, cool. The stuff that I used for data science transfers to static hosts like static sites and web hosting, because it's Python, like, I don't have to learn a new language, I just I can transfer within the community. And it's just so flexible to jump from one area to another, you talking about Instagram, doing their Instagram is a company that's doing as a social media site. And the Python that's being used there is very similar to the Python that I use. That's really not to your point, like they got that 10% of specialization or whatever. But it's so good to know that I can take this language and this set of knowledge and move between different organizations. It's awesome, to be quite honest. Yeah. As a person who has skills, you know, looking for different jobs. It's, it's super cool. I suspect, there's probably some cool lessons that could cross pollinate
across these industries that hasn't yet, just Yes, you know, most people maybe have made that connection. And even if you have that, theoretically, you don't actually have the interactions across the industries that much, but I bet there are.
That's actually so this is one reason I actually really like this podcast in particular, is because you go across all these industries, like I've been listening to these like, oh, that they do that web development. Like, that's a great idea. What just take that idea, and like do it every year,
like we're doing that? We're Yeah, that's a good idea. Awesome, thanks. I guess, maybe, that we're just about out of time. Maybe one more question that I like to ask you sort of a high level closing things out, as you know, what, what do you find exciting in the world of programming and Python these days, like, what's amazing right now, I, you know, I'd say
the thing I like about Python the most is, is the community of people. When I started using Python, I wasn't thinking about the community. But as I got more and more into the programming language, just the people you tend to meet like yourself here, but I'm meeting people online who are friendly and helpful and are just great people to interact with when I when I used to go to conferences, because right now, I can't go to conferences, for reference, retraces in the middle of COVID. But I get so excited to go to sci fi and see all these folks that are excited about what they're being what they're able to do, like detect earthquakes, find cancer, do RNA sequencing, or whatever, and share like that knowledge and moving, moving. I honestly think moving the world forward, I really enjoy just being part of these these doers that are sitting around using Python to do a thing and do the thing they're passionate about and make that thing better. And then even so much that you can explain it to me, he was an idiot about biology and things like that. But explain it to me in a language is Python that I know. And that is the most fascinating, exciting thing to me, and I really love being a part of
it. I love the way you put it that you just be a part of all these doers. building stuff. Yeah, things happen with Python. It's very cool. I think the thing that inspires me really is like, I can almost just imagine anything. And then I can find people doing that with Python and polish libraries that make it accessible to many more people, right? Like I said, Oh, well what about like rocketry? And like, you know, rocket stuff with? Here's like, Oh, yeah, here's like five or six libraries for simulating that. Just so you could test it before you do your router. I mean, it's just like, you know, you name it. And it's probably out there.
That's so cool. I mean, you were talking about this earlier, but I've definitely met people using Python and f1 at a conferences. I was like, What are you doing here? You work for Red Bull. Like, why are you at this tech programming conference? So yeah, we use Python all the time to do stuff with that fun cars like a classic example.
Yeah, I would love to dig into people are doing and like high end racing, f1, IndyCar and stuff with Python. It's gonna be hard to find able and willing to talk about because those groups are so secretive. But yeah, the technology behind those types of events and engineering projects. I mean, the engineering behind f1 cars, they have hundreds of employees.
Oh, yeah.
It's crazy stuff is built from scratch. Yeah, exactly. Someday, maybe I'll be able to talk to But it's it's tricky if someone wants to be on the show, and they they work in that space. Let's let's chat. So anyway, all right. Well, it's definitely an exciting time to be in programming and Python. And all the stories you've told here are definitely part of it. So before you're out of here, though, got the two final questions for you. When you write some Python code, what editor do you use?
Okay, I'm gonna cheat a little bit here, because we talked about three levels. So if I'm at level one, which is my early start, I just use vim and T mux. Because I just need a script, single file, and I'm done. If it's a complex program, like our reserve, 93, pi charm, my go to, and then if it's exploratory analysis, Jupiter lab, so I'm in one of those three, writing Python.
Yeah, awesome. And it's probably not exclusive with the last two, like maybe sometimes pi charm fits. Sometimes Jupiter fits, depending on what Yeah,
right. It's the the Venn diagrams are fuzzy. Sometimes it's one or the other. So there's a lot of blurry spaces, maybe even both, who knows?
Yeah. And notable pi package throughout the two that you work on, right, pi MC three and arvis.
Yeah, but I think the one I want to call shout out to is is X ray, I think that that package can use a lot of a lot of publicity, I, I think it's an awesome package, because it basically takes pandas and makes it more than 2d, it makes it multi dimensional. And another good developers are doing just a great job over there, building that out, making it making awesome. And community wise, we use it in RVs. And those developers have been nice enough to jump on Google Hangouts with us and talk to us and give us tips for what we should do. So plus one of the library and plus one of the people that are putting it in open source for everyone else to use. That's cool. So it's a little bit like pandas, but more n dimensional three 410 dimensional type stuff. Yeah. pandas more dimensions, yep. N dimensions, as many dimensions as you want, as many dimensions to memory.
I've actually heard a lot of recommendations for X ray lately, I think it's getting a lot of traction. So that's awesome. Oh, Hi, Robin, thank you so much for being here and telling your story. People are interested in this whole supply chain plus Python, maybe Beijing as well, you know, final call to action, or what should they do,
there's two ways if you're if you have a job, just see where you can, where you can automate and automate the boring things. She said. And if you don't have a job, or even if you do a job, just get into open source, there's so many things, you can do an open source, you don't have to be a Python expert, you don't really even have to know, tons of Python, you just have to have the willingness to want to join in and be a positive contributor. And that's the magic that keeps all of this going is the community efforts of good people that are just putting their work out there and trying to move the ball forward. Yeah.
And I also want to say like your story is the story of you don't have to start huge. You can start small with a little bit of automation, and you'll see where it takes you.
Exactly, yep. It's pretty much life changing to be quite honest. with you. I know.
I hear you. Alright, well, thank you so much for being on the show was great to chat with you a lot of fun. Thanks for stopping by. This has been another episode of talk Python. To me. Our guest in this episode was ravine Kumar, it's been brought to you by century and linode. Take some stress out of your life get notified immediately about errors in your web applications with century just visit talk Python dot f m slash century and get started for free. Start your next Python project on the nodes state of the art cloud service. Just visit talk python.fm slash linode li n o d, you'll automatically get a $20 credit when you create a new account. Want to level up your Python. If you're just getting started, try my Python jumpstart by building 10 apps course. Or if you're looking for something more advanced, check out our new async course the digs into all the different types of async programming you can do in Python. And of course, if you're interested in more than one of these, be sure to check out our everything bundle. It's like a subscription that never expires. Be sure to subscribe to the show. Open your favorite pod catcher and search for Python. We should be right at the top. You can also find the iTunes feed at slash iTunes. The Google Play feed is slash play in the direct RSS feed net slash RSS on talk python.fm. This is your host Michael Kennedy. Thanks so much for listening. I really appreciate it. Get out there and write some Python code
