Getting started in Python is pretty easy.
There's even a t-shirt that jokes about it.
I learned Python, it was a good weekend.
But to go from knowing how to create variables and writing loops, to building amazing things like fast API and Instagram, well, there's this little gap in between those two things, don't you think?
On this episode, we welcome Eric Matthews to the show.
He has thought a lot about teaching Python and comes to share his 10 tips for going from Python beginner to expert.
This is Talk Python to Me, episode 427, recorded July 19th, 2023.
This is your host, Michael Kennedy.
on Mastodon where I'm @mkennedy and follow the podcast using @talkpython both on fosstodon.org.
Be careful with impersonating accounts on other instances, there are many. Keep up with the show and listen to over seven years of past episodes at talkpython.fm. We've started streaming most of our episodes live on YouTube. Subscribe to our YouTube channel over at talkpython.fm/youtube to get notified about upcoming shows and be part of that episode. This episode is brought to you by by GlareDB.
GlareDB is an open source database for querying distributed and disparate data.
Connect your data sources and use the Python tools you already know to ask questions and integrate data across data sources.
Get started today at talkbython.fm/glareDB.
And it's brought to you by Sentry.
Don't let those errors go unnoticed.
Use Sentry.
Get started at talkbython.fm/sentry.
Eric, welcome to TalkBython to me.
- Thank you.
>> It is very nice to have you here.
The last time we were sitting around talking was at a beautiful cocktail bar at the tail end of PyCon 2023 in Salt Lake City.
Not a bad place to wrap that up.
>> No, it was very nice.
>> What a fun event. We're going to talk about how people go from being a beginner-ish, that's a pretty broad term of what a beginner is in Python and programming, and moving towards how do you take that journey, maybe with more deliberately, a little more quickly, to the expert side of the software developer spectrum.
It's going to be a lot of fun.
>> Yes.
>> Yeah. Before we get into that though, let's just start with your story.
How did you get into programming Python?
How did you end up writing books? All those things.
>> Oh boy. I had to be careful because it's a long story and I like telling it.
I was fortunate in that my father was a software engineer in the '70s and '80s.
When I was growing up, we had a kit computer in our basement before most people had home computers.
So I got to write my first program as a basic number guessing game.
>> Back when it was all about the go-to's.
>> Yes, line 10.
>> Go to 10.
>> What is your number?
>> Yeah.
>> Yeah.
>> I always had an interest in programming.
So I got to watch in real time the development from basic to logo for teaching kids, to C, to Pascal, Fortran, and all that variety of languages that led up to Python.
My journey into Python was I was using Java in the early 2000s, and I thought I'd be a Java programmer for life.
A friend told me that, "Hey, you should check out Python.
Your Java programs will be about a third as long as they are in Java." I couldn't really believe that because it's a pretty big claim.
>> Yeah, that's a bold claim.
>> Yeah, and it worked, and I was amazed.
People talk about this, but it was just plain fun.
there was something more fun for me about writing Python code than Java.
And I have never really looked back.
That's a bit of an exaggeration.
I do keep my eye out for other languages.
I don't always assume that Python is always going to be the best for me.
And I certainly use other languages as appropriate.
But my core, I need to do something.
I don't have a particular reason to choose another language.
I do everything in Python.
Yeah, I'm very similar in a lot of ways, actually.
My background was in C# and C++, not Java.
So a little bit different, but more similar than different.
I recall coming to Python thinking at first, it's a weird, interesting, but weird language, it's white space stuff.
Curly braces are pretty tried and true, what are we doing with all this?
Before I really became super comfortable with Python and just like, yeah, that looks at it, it feels great, it feels right from how I perceived programming should be.
I worked with it for a while, went back and why are all these symbols on the page?
It's just in the way of reading.
I used to thought I had to have the parentheses on the if statement, but it turns out you don't.
Why does this language make you write the parentheses?
All those things, you're just like, "What a hassle." Not even the static typing, just the syntax is more syntaxy.
I'm interested in how your experience with that was.
>> Yeah. I'm going to save that for a little bit because it's going to come up in the points that we go over.
>> Okay.
I'll share though that for my background, there's one of the big piece that plays into all this.
I went into college, into undergrad, focused on chemical engineering because I had a really good chemistry teacher in high school and I thought I wanted to apply what I knew about chemistry.
In my intro chemical engineering classes, we were doing problems about running nuclear power plants.
And I was like, gosh, I don't want to run a nuclear power plant.
And I really enjoyed my physics classes because they were just playing about understanding how the world works.
So I ended up doing an undergrad in physics, and I tutored throughout undergrad because so many people struggled with math and science, the two subjects that I loved the most.
And I found that most people who struggled, it was because of how they were taught, not the subject material itself.
And so I got a strong interest in teaching, and I wanted to be a particle physicist, but I didn't want to be a student forever.
I could get on the PhD track right away.
So I started teaching, and I loved teaching.
I found that the challenge of reaching every person in a classroom was as hard and satisfying as hard science.
And so I just stayed in teaching.
So I taught public school, fifth grade through high school for about 20 years.
And I was a hobbyist programmer throughout all of that.
And so I taught intro programming classes whenever I could.
And in the early 2010s-ish, I was looking for a Python book that I could give my more motivated students and just kind of stand on the sidelines and answer their questions and let them go at their own pace.
but everything either made too many assumptions about what you already knew, or it was written for kids and kind of spoke down to you.
And so that's how I ended up writing a book 'cause the book I wished to teach from did not exist.
- Sure know how that feels.
- Yeah, yeah.
- What's the title of the book?
Share that with everyone.
- That is "Python Crash Course." - No starch, right?
- Yes, from no starch.
And it's been the best-selling introduction, it's been the best-selling Python book for close to 10 years now, which is really satisfying 'cause I kind of had a 10-year vision.
I had the naive notion that I could write a book in the summertime and then revise it during the school year and it would be done.
And it was two and a half years instead of that.
So I had a 10-year vision.
I thought if I'm gonna do all this work, then I should support the book for 10-year period.
So it's been very satisfying to see it be meaningful to so many people over that time.
- That's really awesome.
So your book is in LTS, long-term support.
- Say that again?
- It's an LTS release of the book, a long-term support, not one of those off-brand releases.
- Right, right.
- No, that's really great.
And it's cool to connect with so many people.
You probably go to PyCon and other events and people are like, "Oh, I read your book." And they really probably have stories to tell you about it.
- Yeah, it was amazing.
You go to PyCon or any of these conferences and you see a bunch of booths with people hiring or selling something.
And I used to go to those booths and just have conversations.
And a year or two after the book came out, those people started telling me, "Oh, hey, I learned Python from your book." I was amazed at how quickly people could learn Python and then start to work at these companies and organizations.
>> Yeah. It's interesting.
So they learn Python through your book and now they're working at Bloomberg or whatever, and now they're talking to you through these booths.
Interesting. Got it.
>> Yeah.
>> Right in the eye.
>> As a teacher.
>> This new says, "I'm glad to say I've read that book and learned a lot from it." Yeah. Very cool.
>> Yeah. I'm glad I work for you.
Yeah, I was going to say, as a teacher, yeah, I have always been happy for my students to end up better at whatever I introduce them to than I am.
My focus has been on teaching for a long time, and so I learned my subject well enough to be able to do whatever I need to with them.
But anybody who chooses to focus on one area over a lifetime is going to be better than I am at it.
Meeting those people at the booths who are honestly now probably better programmers or certainly within their discipline than I am, it's a privilege.
>> Yeah.
>> So along this idea of how do you go from beginner, just starting Python to whatever we call intermediate or advanced or expert.
It's an interesting topic, and I think it's one that really deserves some attention.
>> I think it does too. I hear it for so many times from beginners, like I'm learning the language, I'm learning this, I'm learning that, and now I just don't really know what to do to keep making progress.
You mentioned your situation where you are a hobbyist programmer to some degree, and you just compared it against people who are maybe scaling out some DevOps thing at a huge tech company.
those are really different ways you spend your day, right?
As a hobbyist programmer, you have something you're interested in, maybe you poke at it a little bit, you work at it, but you don't have the real demands of it's gotta work at this crazy scale, and also that it's something you can focus your entire effort on all day, right?
'Cause you're teaching or you're doing other things besides that, right, as a hobbyist.
- Yeah, and I think that when we label ourselves or others, beginner, intermediate, expert.
Beginner is the one label that is objective, or I've never programmed before, I'm a beginner, or I have never used Python, so I'm a beginner at Python.
Although even that, if you're experienced in another language, it's hard to call yourself a beginner again.
>> Exactly.
>> Then when I've looked at say intermediate resources, it's a hard world to classify and categorize, because what is intermediate?
I think it's good to recognize that in the early days of a language, say like mid '90s to 2000 for Python, the language was small enough that somebody could call themselves an expert at some point.
I know everything that there is in Python.
The language is so big and the ecosystem is so huge and it covers so many domains that it's hard for anybody to objectively call themselves an expert in Python.
What does that even mean? It really is about-
>> Relative statement.
>> How do you get out of those, I'm just learning the language and now I'm using it.
That evaluation is interesting.
>> Yeah, it is. I think one, it's a good point you bring up about when Python was smaller.
There's this teacher that was a joke.
It says, "I learned Python.
It was a good weekend." There's a truth to that and it's also cute.
But at the same time, I've been doing this for many years and I'm still learning Python all the time.
How do you square those two things?
How can those both be true?
Part of what the difference is, that's not obvious I think to beginners, but it's obvious to you.
When that person said, I learned Python, it was a good weekend.
They meant they rocked the for loop.
They can create a class and they can create a function.
You know, that's, they can do if statements and they now write and instead of double ampersand.
That is one interpretation of what Python is.
But then you look at PyPI with its, I haven't read the numbers in a few weeks or something, but it's close to half a million packages.
If you completely, truly learned a new package every day, you're still falling behind, right?
>> Yes.
>> Continuously, every day, just non-stop for the rest of your life, you're like, "Ah, Molly, I'm more behind than I started 20 years ago," in a sense.
What is Python?
I think when people say, "I want to be good at Python, I want to learn Python, I want to be an expert in Python," you need to understand that there are these different layers or tiers of what that means.
You can be focused on one or another, but when people are comparing, I've done this much and I'm an expert at Python.
Well, are you an expert at the language?
Are you an expert in fast API?
What are you an expert in?
I think just setting the stage with there's different meanings to what I'm good at Python is.
>> Yeah. I'll say right now that I have a hard time classifying myself.
I'm definitely not a beginner.
I wouldn't necessarily call myself an expert, but I don't even know about intermediate.
>> Yeah.
>> Somewhere between intermediate and expert.
I've been writing a weekly newsletter at mostly Python, it's on Substack.
I started writing a newsletter because I wanted to get out of that LTS you're mentioning about the book, where all my writing is about a book.
It's always about the same material.
Writing a weekly newsletter forces me to pick a topic each week and then be able to explain that well.
I think a lot of people think that somebody in my position just knows all this stuff and just write something up each week.
Really, it's a whole bunch of research every time because there's nooks and crannies around every topic in Python that I didn't know about after 20 years in the language.
But it's really enjoyable to fill out that understanding and then explain it well to other people.
>> Yeah, it really is.
Maybe final thought on this.
>> Sure.
>> Tony out there points out and says, adding on to what we were saying, And an expert in Python for data science doesn't necessarily look like an expert in Python for web.
So I was going to add basically something similar, that I would consider myself an expert in web development, and API stuff, and those kind of things.
I've been running production Python apps for a long time, and really just polishing them.
But put me in front of some machine learning situation, or too much advanced pandas, and I'm like, "Well, I'm a beginner over here." Those are both also called Python.
There's just all these different contexts and spheres of relevance that I think people got to keep in mind.
Probably good to hear them say, "You're an expert in some things," but it's not like you just know it all.
>> Right. It's good to recognize that expertise in one area is oftentimes transferable.
You aren't immediately an expert in the new domain, but what you've learned in one domain is oftentimes making it easier to gain expertise in another one.
Absolutely. Like if the data science side, right, you're still good at Git.
That's not a new thing for you, right? You're not like, wow, what is this source control thing? Like you can still completely rock that. But, but maybe you're not embracing the vectorization of style of programming and so on.
This portion of talk Python to me is brought to you by glare DB. Glare DB is an open source database for querying distributed data. Here's how it works.
First, you connect your data sources.
GlareDB makes it easy to connect to your data, no matter where it's stored, with integrations into many popular databases, data warehouses, and more.
This includes Snowflake, Postgres, MongoDB, BigQuery, and Object Storage.
Now you can query everything.
You use the full power of SQL to query your data across these many different data sources, join data across production databases and analytical warehouses without limits.
Finally, you can use the tools you already know and love.
Visualize and query your data using tools you know from Python's data science stack.
With just a single import, you can query Pandas and Polars data frames using just SQL.
You'll be asking questions, extracting insights, and driving decisions with your data without waiting for an ETL pipeline to move data around.
So if you have distributed data and disparate data sources and you love open source, you owe it to yourself to give GlareDB a try.
Visit talkpython.fm/glaredb to get started.
The link is in your podcast player show notes, and please use the link to let them know that you came from us.
Thank you to the team at Glare DB for sponsoring the show.
Maybe this is a good time to start talking about the ideas.
So what I did is I said, you know, Eric, you've got this cool book.
How about you try to extract some ideas that you've learned from writing the book and working with people for this whole topic of transitioning from beginners towards the expert side of programming.
So let's go through the list.
Sure.
I like, first of all, I like that structuring.
I kind of forced me to think specifically about what I can say.
I want to clarify this isn't a countdown.
A lot of times lists are like, here's the top 10 things you should know about Python.
So these are ideas for specific things that people can do to move away from wherever you were as a beginner and more into that intermediate and expert.
And be comfortable with justifying that.
So for this kind of list, I start with the most important things first, because everything else builds on that.
And so when I think about what do people need to do to move away from beginner and towards being fluent and comfortable and competent, when able to solve a variety of problems, the first thing is when you're learning, know your goals, why are you learning a program?
And so we see this all the time.
If you follow conversations about learning Python, I want to learn Python.
Okay.
What should I focus on?
Well, what are your goals?
Why are you learning it?
What do you want to do?
I mean, I think the answers to that tend to be, I just like programming, I'm curious.
For a lot of people, it is about money.
People know that software development jobs can pay well, and I think it's quite appropriate and reasonable and important to name that if that is one of your goals, and there's nothing wrong with that.
>> Right. It could be career but not money in the sense that I have a decent paying job now, but I don't like my job.
If I could just have the same money, but actually work on programming all day, That would be awesome, right?
>> Yes. The money thing comes up for me because I'll say, one of the things I'm proud of as an author is I've replied to pretty much every single e-mail anybody has ever written to me about the book.
I think that's part of why the book has done well, because I look for patterns.
If people start to write about the same thing, then I adjust the book a little bit to address that.
It keeps my e-mail volume reasonable, but also means it's still meeting the needs of readers.
But it also means I've had interactions with thousands of readers.
And one of the things that comes up in anything that goes beyond a, can you help me fix this one problem?
I oftentimes ask, what are you learning this for?
What's your story?
And a lot of those people are doing career transitions.
It's a mix of people looking for better pay and oftentimes that's tied in with to support my family, those larger life decisions other than just, you know, it's never greed.
It's never, I wanna be rich.
It's always, I want to live a reasonable life.
And what you say, people being tired a different line of work and looking for something where they can have more power, more independence, more control.
When you say know your goals, for most people, their goals is not one goal.
It's a balance of those and recognizing where your balance sits is really important because it guides the rest of your learning and what you do.
>> Yeah, it absolutely does.
>> Somebody who's just plain curious. Go ahead, sorry.
>> Well, yeah. I think when we're talking about beginners, there's a lot of people who get pulled into Python without an explicit intent of becoming a software developer.
In fact, they would maybe start out by saying, I don't want to be a software developer.
I'm a biologist, I'm an economist, I'm a philosopher or whatever, but I need a little bit of programming because I learned that if I do these six lines of Python, magic happens way better than if I had to force it through Excel or something.
I think a lot of the beginners are in that realm of, well, I'm here now.
I'm still not a programmer.
Don't call me one of those, but I use programming for my thing.
That's also a pretty interesting angle, I think.
>> Yeah, and I think that's a really, really good thing for people to recognize.
It is interesting to have this conversation about labels and beginners and intermediate, because how do you know when you're no longer a beginner?
One of the clearest signs is when you have used programming to solve a real problem that you have.
You can throw in with a level of understanding rather than copy-pasting.
>> But for a lot of people-
>> Or now, ChatGPTing also.
>> Yeah. That's a super interesting dynamic to throw into all of this.
But that is the end goal.
It should be the end goal for most people.
Not just to know how programming works, but to use it to solve a real world problem that you or somebody else has.
As soon as you're doing that, you can start to consider yourself moving out of the beginner place.
>> Yeah. You might still feel awkward, but you're doing it.
Really interesting comment that I think is worth highlighting.
Foxo says, "I'm an anesthesiologist.
You cannot imagine how much Python has helped me with different tasks." Amazing. That's really cool.
>> Yeah.
>> Thank you for sharing that.
>> Yeah.
>> Yeah.
>> Okay. So tip number one, know your goals.
Why are you here? Because that'll help guide you somewhat. Yes?
>> Yes. I'm taking a few notes about throwing things in there later in the list.
>> Beautiful. All right. I agree.
I think it's important to know your goals and there's a lot of reasons why people get into programming.
>> Yeah, the last thing on that is, if somebody is just plain curious, as far as teaching and learning, if somebody is just plain curious, that's their main goal, you have a lot more flexibility in the examples you present to them and the pace at which you present material as opposed to somebody who says, "I really want to do a career transition as soon as possible." That person needs a much more grounded and practical and timely approach.
>> Well, and you also might look out and say, "Okay, what framework do I need to choose?
What database experience do I need to get?" because I'm looking at Indeed job listings, and I'm trying to hit the largest set of those rather than what project am I trying to work on, or what am I curious about?
You're like, I need to start checking the big boxes.
Let's check those boxes so I can get a job in six weeks.
>> Yeah. All right. Tip number 2.
>> Yeah. Tip number 2. What do you got?
>> Have a project in mind.
Whatever your goals are, having a specific project in mind, helps put everything else in context.
If you are learning about a for loop and you have a project, I'm going to name one of the projects that I've worked on.
I live in Southeast Alaska.
And one of the impacts of climate change here is an increasing frequency and severity of landslides.
And so Southeast Alaska is a rainforest.
For anybody who isn't aware of that, it's not all snow in Southeast because we're right next to the ocean.
And so we're still getting as much rain as we always have.
But it's coming-- instead of light rain throughout the year with some periods of heavy rain, we're getting a lot more nice weather.
We just had two or three weeks of no rain, which was really unusual here.
But we'll get heavier fall storms that can lead to landslides.
And so I had a project that monitored a local river's level to correlate that with landslide risk and helped develop a warning system.
And so a project like that in mind, that's a big project.
And so if somebody is just learning Python, that's hard to say, like, here's everything you need to know to build that project.
But if you're teaching a for loop and you know that somebody is interested in a project about monitoring climate, then you can make your for loops about processing data related to rainfall, river levels, things like that.
>> Yeah, absolutely. Python is really interesting in that it's pretty good at the IoT thing as well, which opens up a lot of, we've got CircuitPython and Adafruit and all those areas to play with as well, which is a whole different kind of project.
>> Yeah. There's an infinite number of projects.
If you have a project in mind, being clear about that with yourself and with any way that you're learning with or from is really helpful as far as tailoring what you're learning to your purposes.
>> I'm curious.
>> It's always easier to teach somebody who has a specific goal in mind than somebody who is just vague.
Just teach me something.
>> Yeah. Well, because it's focused.
>> Yeah.
>> Right? I find a lot of people try to boil the ocean metaphorically when they're trying to learn these things.
Like, well, I saw somebody saying, "Well, all these CS topics are really hard for me.
People keep telling me all these CS things I need to know, and do I really need to know them?
Well, maybe eventually, but not all at once.
What are you doing now?
How big is your program?
You really need testing.
Maybe you do, maybe you don't.
Do you really need classes?
Maybe you do, maybe you don't.
Do you need generators? Do you need anything?
There's all these things that you probably could say, don't need them now, maybe in a year or two, I will need them, then I'll be motivated to learn them.
When you have these projects, You could say, I need these five things or I need these four things.
I need to know them and then my project is working, instead of trying to say, well, what do I start with even?
>> Yeah. One of the criticisms of many learning resources, and I'm a little sensitive to this because I've written many of these examples is when people do a for loop and the for loop is about kinds of pizza or something, or toppings of pizza, and people look at that and say, "Why do I need this?
I don't care about pizza toppings." You need that because the person creating the resource has to have some kind of context for the example.
When I'm teaching a class in person, I don't come up with, "All right, we're going to do pizza toppings." I ask people in the class, "Hey, what are you interested in?" Then we pick something that somebody in the class that day mentions and then there's relevance right there.
You don't have that if you're learning on your own, but what you can do if you do know your own project, you work through the example about pizza toppings, but then you write a loop that relates to the project that you want to work on.
So knowing that project is really helpful regardless of how you're learning.
>> Yeah. Let me pull up another comment.
I think this is worth covering for people as well.
So Bishnyadar says, "For me, it was all good while I was learning programming Python.
But as soon as I was out there in real life looking for jobs and looking at the requirements, it drained a lot of energy out of me.
Suggestions. What do you think?" >> Oh boy. I don't think there's an easy answer to that.
I think it's important to be honest about that.
Personally, I have never worked as a full-time programmer.
That puts me in a weird spot for talking about things like career transitions.
I've helped thousands of people make career transitions, but I don't sit in the interviewee chair.
>> Yes, I hear you.
>> Not very often. Having spent a good part of my life as a teacher, teacher hiring and teacher, the structure of employment for teachers is so vastly different than programming.
>> Yeah. The time frame of teaching jobs is so weird.
It's like there's a time once a year often that you can apply or change jobs and otherwise you can't.
It's not exactly true, but generally true.
>> Yeah. I'm in an interesting position now where I'd like to work as a professional programmer.
But honestly, I have to spend 10-20 hours a week supporting the book that LTS stuff is hard-coding.
>> I know. I got a bunch of courses and stuff.
I know. I was just redoing some videos that had a mistake and then somebody noticed.
>> Anything I do is on top of that work.
I can really only consider part-time work and then it becomes a, is this worth it?
So to be more direct, I don't think there's an easy answer to the grind of looking for work.
And as that network thing of once you have a job, it can be easier to find the next job.
The couple of things I'll share for people is, if you, so we talked about solving real world problems.
If you have a story that you can tell about how you have made something better through programming what employers are looking for is that, yes, you have capability for programming.
You can pass whatever LeetCode tests or screenings are necessary, but also have you used what you've learned about programming to solve something.
And so the stories I always come back to are people who are working non-programming jobs and start to learn programming and then use that to solve something in their work that they weren't expected to solve.
And that becomes a huge selling point in interviews.
My favorite story is a guy who was working for, I believe it was UPS, and this was quite a while ago, and I feel comfortable telling that story, partly based on time.
They were working for one of these large delivery companies, and they were aware of people getting fired in warehouses for damage to the goods that were supposed to be delivered.
The person was learning Python and they wrote some data analysis, and they were able to pinpoint that the damage was coming from a manager or management group that was not training end-line employees well enough.
That was really interesting story because the people being fired were not the people who are causing the damage.
They caused a physical damage, but it was-
>> Right, but it was more systemic.
>> Yeah. That person save their company millions of dollars and they got a $5,000 a year raise.
What they really did was they used that story in interviews to gain an actual programming position at a different company.
It's hard when you're starting out.
All I can say is look for the selling point for yourself, and know that once you do get your first break, It becomes easier to stay on that path.
>> I have one more thing to add.
A lot of times when people are looking for their first programming job, they have experience somewhere else.
I realized some people are young, they learn programming and that's their totality of work experience.
But a lot of people maybe studied something else and became a programmer, like you studied physics, embrace that.
So imagine you studied logistics.
Instead of trying to look for a programming job because you don't want to do logistics, Look for a programming job at a logistics company.
Because then you can say, I have programming skills plus I have an expertise in your area of specialization.
Once you intersect those things, you earn a much smaller set of editors.
I'm looking for a biology job, there's a ton of people doing biology.
If I'm looking for a programming job, there's a ton of people doing programming.
How many are doing biology and programming, maybe in the specific area that you're focused in?
That all of a sudden gives you an opportunity, But it also means you need to look somewhat differently for jobs, right?
You don't go apply to FANG the same way that everyone else thinks they should apply to FANG.
Look for these small companies because not only will they appreciate it more, you'll get a better chance to grow because you'll get a bigger responsibility to write more broad software.
The interviewing process is not nearly as terrible, I think, for small companies, right?
It's a chat with a couple of people and they're like, "We think you can do it. Give it a try for a week." Whereas places like the large tech companies, they've got these pretty horrible.
Here's your take-home exercise, write it.
We'll consider it if it works out well, maybe amongst the other thousands.
It's like a really different experience.
I think that first step in the door, that first job is the one that is hard to get.
>> Yeah. I'll throw one more piece in there and it's a quick thought, and that is contributing to open-source projects is something we need to be careful about, because oftentimes it's privileged work.
You have some extra time and you can do that.
But one of the real benefits of making meaningful contributions to establish open-source projects is it throws you all the way into professional workflows of managing, using source control and just the bigger piece communicating with a larger team.
>> Yeah.
>> As I've gotten more into open-source, for me that scratches that itch of wanting to work as a professional programmer.
>> Sure.
>> I can clearly see.
>> It's hard to simulate.
Yeah, it's hard to simulate proper CI/CD merge conflict, PR discussions on your own little hobby project, that's for sure.
This portion of Talk Python to Me is brought to you by Sentry.
You know Sentry for their error tracking service, but did you know you can take that all the way through your multi-tiered and distributed app with their distributed tracing feature?
Distributed tracing is a debugging technique that involves tracking requests of your system starting from the very beginning like a user action, all the way to the backend, database, and third-party services.
This can help you identify if the cause of an error in one project is due to the error in another.
Every system can benefit from distributed tracing, but they're especially useful for microservices.
In this architecture, logs won't give you the full picture, so you can't debug every request in full just by reading the logs.
Distributed tracing with a platform like Sentry gives you a visual overview about which services or called during the execution of certain requests.
Aside from debugging and visualizing your architecture, distributed tracing also helps you identify performance bottlenecks.
Through a visual like a Gantt chart, you can see if a particular span in your stack took longer than expected and how it could be causing slowdowns in other parts of your app.
Learn more and see some examples in the tracing section at docs.sentry.io.
To take advantage of all the features of the Sentry platform, just create your free account.
And for all of you, talk, Python listeners use the code talk, Python, all one word, and you'll activate a free month of their premium paid features.
Get started today at talk, python.fm/century-trace.
That link is in your podcast player show notes and the episode page.
Thank you to Century for supporting talk, Python to me.
So we're number two, we'll cover, get a project.
Yeah, we can go through some of these a little faster.
Yeah, no, of course we can.
I got what's number three.
Number three is don't limit your learning to what's needed for your project.
So it's important to have a specific project in mind to give context for what you're learning and give purpose and steer you towards feeling success and knowing like what's good enough, but always be ready to expand your toolbox and your understanding and it'll serve all your projects in the end.
And learning is fun.
Learning in good ways is fun.
Learning with good resources, with good people.
You want to learn, you want to learn fast API.
Here's your fast API worksheet.
The answers are in the back.
Yay.
Jeez.
I have a kid in middle school, so we shouldn't talk about worksheets.
But a quick example is I'm working on a project called Django Simple Deploy that automates deployment for projects in Django.
It's not just for beginners.
When Heroku collapsed its free tier a couple years ago, we saw a bunch of very experienced Python web people en masse go look at other platforms.
And we saw them talking about how difficult it is to go through each platform's documentation and get a simple app deployed just to see the process.
And so this tool is a core command, manage.py simple deploy, and then you name the platform and it configures your project for that platform, and then you can push it.
And so it's set up as a core command that then calls out to a platform-specific command and configures your project for those commands.
So when I first wrote it, my first pass was just a bunch of classes that they worked together because I wrote them and they're all nice, but I had learned about abstract base classes, but never had a purpose for using one.
And so when this project is becoming, as this project is becoming more refined, I need to enforce a structure so that the platform specific code works with the platform agnostic code.
And so if I hadn't, or I should say this the positive way, because I had done some general learning about more advanced object-oriented principles, I have some sense of how to enforce that structure as the need arises.
So it's good to have a project in mind, but don't limit what you're learning just to that project because you'll become a better programmer and you'll do your projects better.
>> Sure. One of the ideas I think is really powerful is that inspiration is perishable.
If you are inspired about something, you might not be that inspired in a couple of weeks.
That doesn't mean it's not cool anymore, that just means you moved on, your focus is elsewhere or whatever.
Yeah, sure, you need to learn the things you need to learn to do your project or to check some boxes.
But if you find something like, I am really interested in that, leverage that inspiration.
I don't know about other people, but for me, I'm two or three times more productive in learning and writing code and all sorts of things, if I'm really on fire about something versus like, guess I'll get in there and like fix that bug and like something that I'm not inspired about as MailChimp just changed their API and deprecated their, you know, shut off their old one. So now I have people on my mailing list, I got to go rewrite that. There's no, I, what I get in the end is I get to just keep having them on my mailing list. There's zero inspiration there. But if I ran across like, oh, there's this new feature in Python 3.12, or there's this new package that I found on PyPI, that's awesome. Like, I just really want to like, leverage that, right. But while it's, while it's there, Take advantage of it.
>> All right. Number 4.
>> Yeah, number 4. What do we got?
>> Read good code.
This is one of those things that I wish I had been told a lot earlier in my programming career than I was.
I went a long time, decades, just looking at code that was presented in the classes and books I read, and then writing my own code, and then only reading what I needed to in order to do my projects.
Then at some point, I forget if I saw a suggestion to do this, or if I just started to do it out of curiosity.
I think it's probably around the time when a lot of code became very visible through platforms like GitHub.
But if you're using a library like say, pandas, that is out in the open.
Rather than just using pandas functions, you can go look at the code that runs that function.
I shouldn't say pandas because I'm just starting to get more fluent with that, more comfortable.
I'll say like Matplotlib.
So if you're making a scatter plot, fig.scatter or something like that, you can go look at that scatter function and see what it does.
You see the full set of arguments that it can take.
You see all of its capabilities.
And you see how the people writing and maintaining matplotlib take your information and turn it into a plot.
And when you look at that code, you're seeing professional quality code.
It can be overwhelming.
There's probably going to be parts that you understand and parts that you don't.
But the more you look at it, the more you understand and you start, your code becomes better because you're seeing high quality code.
It's good to recognize that those people writing that did not write that polished code the first time they wrote the scatter function.
So don't think I'm a bad programmer because my code doesn't look like this.
The polished code that we look at from large popular well-established frameworks has been well-refined.
So it's something to aim for.
>> Yeah, it totally is.
It's one of those things that's hard to get experience with if you're not yet working as a professional developer or even if you are, but you're a one to two person shop or you don't collaborate a lot.
>> Right.
>> It doesn't have to be that you're not working as a pro, working as part of your job in that.
It could be that you just don't have enough collaboration or enough people.
>> Yeah.
>> Yeah.
>> A good thing.
>> So good advice.
>> It could be hard to know where to look.
All right. So if I look at the Python source code, giant, I have no idea where to look.
Look at the most recent commits.
So just pick a commit, look at the files that were changed and get some sense of what people are doing to modify the language and these larger libraries.
Look at the newest issues, what are people discussing about what they're trying to work on and how they're trying to solve that, and maybe look at some of the longest open issues.
What are the hardest problems that people are wrestling within in some of these projects that we all use?
>> All good advice. I would say the larger the open-source project and the more popular, maybe harder it is to read because it has to be more polished, and more optimized and more, it's got that extra layer of, well, it's going to make it harder to read, but it'll make it 2 percent faster, and people will appreciate that.
We're going to do that.
Whereas, there's a tier below that of open-source things that are professional level, but not yet beyond approachable.
>> Yeah. I did two newsletter posts recently about exploring recent Python repositories to get at this exact issue.
The idea if you're looking at contributing to Django, it's hard. Django community is doing a lot of work to make it more approachable for people wanting to contribute. But it's absolutely true that it's hard to contribute to and get into larger well established code bases. So I use the GitHub API to find, say, all the Python projects that have pushed to GitHub in the last three weeks that have at least 10 stars. And those are the fresh projects that are getting attention.
Yeah, don't have all this, this long term stuff. And so I ended up actually contributing to one of those projects, because it's just what you described earlier, just pulled me in and fascinated me.
It's so nice to have some concrete contributions to a project that is in that fresh stage.
>> Yeah, that's fantastic. All right, what's the next one?
>> Know your tools.
I laugh at this one because I think about, this is one of the reasons I transitioned into an equal focus between programming and teaching.
I used to, my priority was 98 percent teaching and 2 percent programming, Now I'm probably 60 percent program, 40 percent teaching.
Tools for teachers are terrible.
Teachers, public school teachers still write most of their lesson plans in Microsoft Word.
That sounds like, oh gosh, they just have to write out onto a blank page.
But what it really means is we as programmers are used to working with structured data.
If we have a workflow and we're writing something, and then we update the structure of our information, we don't have to go back and rewrite everything.
We have tools that manage restructuring projects.
If you write three years of lesson plans in Word, and then you figure out how to teach better, and you want to restructure all your lessons, there's no automated way to do that. It's a mess.
I'm grateful as a programmer to have things like IDEs, formatters, linters, Git, any version control system, GitHub, hosting platforms.
My core advice here is to, as you're becoming more established as a programmer and as a Python programmer, start to recognize what are the tools that you personally find value in, what is your favorite IDE, what is your preferred formatter, what's your preferred linter version control system, and then just take a little time to focus on that tool itself.
So if you've been using VS Code for six months, spend three days and just read about configuring VS Code.
You'll almost certainly come up with some things that make your day-to-day work more efficient, more effective, more enjoyable.
Every time I've taken time to do this, I've come out better for it.
>> Yeah, whether it's VS Code or PyCharm, they both have a ton of options that you can pick from.
They're discoverable or less discoverable in different ways.
PyCharm makes it obvious what all the things it can do, but there's so many things that people are like, "Well, I'm just going to stick to my lane, just stay over here and do the thing." VS Code is a little less discoverable, but maybe it makes it even harder to take full advantage of it because it's like the Command-Shift-P to pull up the palette and then like, "Well, it's a huge list. What I do with this?" >> Yes.
But they're being really good with your editor.
I know some of the things that are coming as well in your list, this adds on top of it, but it makes a huge difference.
It makes things like being comfortable navigating your code, feel better, testing your code, changing your code, doing some of these workflows you talked about, like Git and PRs, all of that stuff.
All of those things are in those tools plus way more.
That's not even talking about the extensions or plugins that you might go after.
But it's easy to see, well, I've fired it up and now it's an editor.
It's a thing and it has cool autocomplete, and then just forget about the 100 other things that it can help you with.
>> Yeah. Particularly with IDEs, they do a lot for us.
That can be a good thing and it can be a bad thing.
I have steered a lot of people back towards simpler editors like Sublime Text and even Genie is a fantastic one that a lot of people don't know about.
Because the tools like VS Code, PyCharm and whatnot, when everything's working, what they do for us is fantastic.
When things stop working, if you don't know what it's trying to do for you, it can just make things much more confusing.
Particularly, that comes down to things like tools that build virtual environment for a new project for you.
If you understand what that's doing, and it stops working, you can go troubleshoot it.
But if you don't know what it did for you and now it says this module is not found, it can be a mess.
>> Virtual environment seems to be just like, >> They just go wrong so often.
>> Yeah.
>> I'm not in the pure, I've created one on the terminal and I've acted, that's solid.
>> Yeah.
>> In the tooling, it's like sometimes it finds it, sometimes it doesn't, sometimes it really doesn't want to find it.
It's nuts.
>> Yeah. I'm glad you brought that up.
The core advice there for me has always been, people have a tendency to want to go find another editor or IDE that's going to manage that better.
When I tell them, it's no, it's going to manage it differently and you're going to run it to the same issue and then you're going to need to solve it.
When that stuff happens, taking the time to learn what your editor is doing for you, and then be able to troubleshoot that, that's going to serve you well in the long run.
>> All right. What's next?
>> Learn how to test your code.
I wrote here, you won't sleep more, but your sleep will be more restful.
I went probably 20 years programming without ever writing a test.
I always had this notion that it was difficult, it was separate from programming.
The first time I wrote a test, It was so much easier than I thought and so cool to see my program run automatically and had the output validated.
I love testing.
It's probably my biggest interest these days beyond deploying Django projects.
I love it because when we write code, we want it to work.
When we have a project, we want our project to be successful.
Testing validates that.
Testing gives you confidence that your project is working correctly, and if you fix a bug, you just fix it once.
So testing is its own podcast for some people.
So I'll just say that testing is easier than a lot of people think it is.
Go use pytest.
I used to teach unit tests because it's in the standard library, but pytest has become well-established enough.
It's one of my favorite Python packages of all because it's one of those few that serves pure beginners and experts equally well.
It's the best way to be introduced to testing, and if you're testing professionally, there's no tool better than that.
the zen of Python, right? That it's really serves beginners well, but also experts well.
I think that's one of its special capabilities.
Yeah, I will encourage people and Michael, I'd be curious if you agree with this or not.
I'd encourage people to not necessarily look at unit tests right away, because unit tests are brittle for newer projects. I really like end to end testing. And that is where you run your project, you get some output, and then you run tests against that output. And That is not testing the implementation of your project.
That's just saying, does your project work?
And so the project I've been pulled into recently is one called git sim, git hyphen sim, and you run it against your own project and it gives you a visualization of all your commits.
And so for people trying to understand how git works or how git is working for their particular project, you run git sim merge and it shows you visualization of what that merge would look like.
And so that project is newer and it had no tests.
And so I helped write the initial test suite.
And I said to the person, like we shouldn't test your implementation 'cause you should be free to change how you're building this new project, but we should actually start to test the images that you're generating so that when you do change your implementation, you know whether the images that your users are gonna see are the ones that you think that you've been seeing and you think they're gonna see.
And so that's really nice because you can, you don't have to aim for 100% coverage of your code.
you just start to get that big picture.
Yes, my project is still doing what I think it's doing.
That makes for better sleep and all of your non-computer activities are more enjoyable because you have more confidence that things keep working.
>> Yeah. I'm with you on not going too far down the unit test side.
I used to write tons and tons of very low-level focus unit tests.
When I was on a team, I always had a hard time having everybody have buy-in.
Some people would, some people wouldn't.
They'd go do something that would break the test.
You know, like you broke the bill.
They're like, Oh yeah, I guess, I guess I did.
You're like, you realize that we don't all participate in this.
It just becomes a hassle for me, like chasing after trying to like patch up the tests as you, you make these changes.
And as you're more focused, as you're like lower level in the world, that's just a more constant problem.
And it also requires more effort, right?
So maybe that effort is worthwhile, but if, if you're new, maybe it's not.
And so I'm a little bit more on board with just like, let's do the main things at like kind of top to bottom in the app.
And if that stuff hangs on, we got a real good chance.
And over time, my experience has been for the most part, it's things blow up hard.
They don't just like, oh, there's some little subtle problem.
Generally, not always true, but generally, like if I screw something up, a lot of tests start failing even when they're these high-level things because something's pretty, pretty messed up.
And in that regard, that other person probably didn't intend to change the output or the overall behavior of the app in well-known ways.
They just changed some implementation detail and they weren't being sufficiently rigorous with their software lifecycle.
So yes, I'm on board.
The web equivalent, the easiest web equivalent that I can think of is if you've got a website and it has a sitemap, your website should have a sitemap for all of your data-driven pages.
just go get the sitemap and request every page.
Does it give you a 200 or does it give you a 500 or a 404?
As 404s and 500s should not be found in your sitemap.
But that's a really easy test.
Loop over that, call every one of those with your self.client.get or whatever your HTTP test thing looks like and just call all of them.
That's one thing you could do that's in that category.
>> As an author, I wrote tests for most of the code in Python Crash Course.
And so Python Crash Course was first written, I think, on Python 3.5.
And so it's been through, like, what, six or seven iterations of Python and all kinds of iterations of the libraries that the projects use.
And so whenever a new issue comes out, or new, sorry, version comes out, I just run tests on most of the code in the book.
And it pulls the test, pulls the code from the GitHub repository for the book, and just runs it with the new versions.
And that's been part of how I've been able to maintain into the upkeep and maintenance on a 500-page book that covers a lot.
- Yeah, yeah, that's awesome.
- Yep.
- Let's keep going.
There's a couple of good comments and questions in the audience, but I think we're on a schedule, so let's keep going.
- Yeah, yeah.
Last comment about testing.
I love it because I think that when you test your code, you learn things about your code that makes development better as well.
So it's not just does it work?
It also gives you insight into how your code is working.
I'm looking forward to exploring more.
All right, next point, know what's good enough for any given project.
As a teacher, students would say like, am I done, am I done, is this good enough?
And I watch other teachers say, like, don't ask me that, always work harder.
And I always tell the students, that's a great question.
What is good enough?
And so whatever your project is, knowing your benchmark for what's good enough and when it's done, when you can move on to the next thing is really helpful.
'Cause you'll never write perfect code, but you can certainly write good enough code.
- Yeah, there was a really popular article, blog post, something like that, that was, you're not Facebook, you're not Google, you're not Microsoft, you're not LinkedIn.
So it was something along those lines, right?
And the admonishment or the advice there was, you might read about how somebody like Google has all these containers doing all this scale out and failover and geo location.
Your app that manages reporting for managers that you're at your company, there's five managers and they do it once a week.
You don't need global scale out techniques.
You don't need the zero downtime that containers offer.
You don't need load balancers.
Like none of that stuff applies to you.
And so in fact, I would say, if you start applying those things to it, you make your application harder to deploy.
You make it harder for other people and your team to work on.
You make it less good for that situation.
But at Google scale, the opposite is true.
It's less good if it doesn't have those things.
And so it's not just, well, this is a crappy project, so it gets crappy level CS attention.
It's a small project, so it can be written and managed and worked on in a way that allows for, you know, optimizes for small teams, not worry, not optimize it for uptime and all those kinds of things, so that you can make it work better in that situation.
And so I totally agree, knowing what is good enough is super important, but what is good enough, it's not like a spectrum.
Like I'm at the really good level.
It's like, you've got a, it's a multidimensional thing.
Like you're at a good level for the context that you're in, the situation you're in.
- Hey, you're walking right into bullet point, or tip number eight, I think it is.
- We are.
- Yeah, and that's embrace refactoring.
And so my notes about this was that good enough is situational.
So when a project proves it's worth, like say you have an idea for a project, you build it out, you get an MVP functional, and you've reached your good enough to see whether the idea works.
If nobody ever uses it, it doesn't catch on, it worked, it was interesting, but it's just not catching on, you move on, move on to something else.
But if that product has started to gain interest, now good enough moves.
And so maybe it needs to be more efficient.
Maybe it needs more testing.
Maybe it needs to be deployed in a different way.
And so refactoring tied in with that idea what is good enough is the road for evolving a project.
All of these projects that we're talking about, the well-established ones, the Googles, the Fangs, those projects are constantly shifting bars of what is good enough, and they're constantly being refactored in very careful ways to reach those new goals.
>> Yeah, I'll say that.
>> I love refactoring.
>> I love refactoring your tools.
>> Yeah, I do too. I think it's fantastic.
So many people who are getting started will tell me things like, "I'm not sure how to get started.
I don't know what the best way to do this is.
I'm thinking about it and I've tried something, but I wasn't sure so I went back to thinking.
The best way to get started is just give it a shot, just create something.
You'll learn what of that is working and what is not ideal.
More importantly, something that's awesome about software is it's plastic.
You can change it, plastic in the soft plastic way.
You can evolve it as you learn more about it.
I go, I thought that should have been separate module, but this should be just part of that class.
We're just going to move that in through refactoring and not feeling like you have to have a full visibility of what you're working on to get started.
I think that's maybe it sounds counterintuitive, but I feel like that's an expert perspective.
It's like, I think I need to go that way.
We're going to start down the path that way and we're going to evolve and course-correct as we go rather than completely stressing about, how do I get started? How do I see the whole end line before I start writing it?
>> This is part of why this is not a countdown.
Because for example, if you have even a small set of tests, the test your final output.
Refactoring is easy.
It's fun because if your test break and you don't like the idea, you can go back to where you started.
>> Another fun thing about refactoring is the whole concept of code smells.
I think becoming an expert, there's a lot to be learned from the code smells.
The idea of the code smells is the code works, but there's something a little bit off.
It makes your nose turn up.
You're like, "Oh, okay.
Yeah, I guess it works, but oh, right." It's just an ooh.
there's a lot of lessons of how things get out of control and they get into a bad state and how do you fix them.
And having that intuition, I think is great.
So some of the code smells are like long method, method with too many arguments.
One, probably my favorite is code comments because you hear you should comment code all the time and there should be places that need a comment, there should be comments or help strings, whatever.
But a lot of times, Code comments are deodorant for these code smells, right?
It's like, oh, this is kind of gross.
Let me make a comment about why it's gross.
Or this is poorly named.
People won't know what this is.
So let me make a comment about what it is.
And like halfway through that comment, you should realize like, oh, what if I just named it?
The thing I'm trying to tell people it kind of does.
Then I don't even need a comment 'cause it has a really good name that is its own thing, right?
And so poor names, too many parameters, all these things are deodorant, and you're trying to justify how gross this part of your code is, maybe you could just apply some of these refactoring techniques to make them better.
Not going into a whole refactoring detail, but I really, really like this idea.
- Yeah, I write a lot of exploratory code, so you're describing a lot of my work.
But because I'm fine with refactoring and enjoy it, and I'm comfortable with tests, that workflow works, and I think it can work for a lot of people.
- Yeah, sure, sure.
Well, and those things don't necessarily start out that way.
long method didn't necessarily start out long.
- Mm-hmm.
- Grew and grew until it was a monster.
Same thing with too many arguments.
It probably started out with one or two, but then now we need this other one.
And what about that?
And then all of a sudden it's like, again, a monster.
Right, and so it's an evolution.
- And it's long because it works.
And so at some point you pause and cleaned it up, make sure it still works.
All right, number nine, write things down.
- Yeah.
- Write things down.
And I don't say that as a writer.
Writing for me, I started writing when I was young because I saw somebody else write a journal and it's like, oh, I'm going to try writing.
And so I've just written things all my life, and most of it is messy, and some of it, very small amount of what I've written has been polished and put out in the public world.
But I have found that almost everybody I talk to who writes in some way, not for public, but writes in some way, enjoys their work a little more and does a little better.
My suggestions are things like keep an ideas notebook.
Those are, once you know how to build things, ideas come to you and you're like, oh, I could make that at some point.
If you have a place to record those ideas, when you're not sure what to do, you can go back to it.
Write comments, despite what Michael said.
Comments in a professional, well-established project with many collaborators are different than comments for your own new projects.
Whatever you're doing, write comments.
Do put the information in that needs to be in there to work, let them be cleaned up.
>> Yeah. I don't mean to say you shouldn't write comments.
There's a lot of times where the point of the comment is to-
>> Yes.
>> -justify why something's bad.
If that's the case, it probably doesn't need to be bad.
But if it's help docs, if it's like, well, here's the different stuff that you can pass and these are what we expect, there's certainly valid comments, no doubt.
>> Write comments to yourself and others, and even if nobody else is using your project, if it's something that might be shared at some point, those are good.
Learn to write documentation.
If you write an ideas notebook, if you write comments, documentation flows out of that.
It just becomes a more polished version of what you're writing.
Write questions down when you're not sure about something.
GitHub issues are amazing.
I haven't used project management software because GitHub issues are so useful.
>> No Gantt chart, no Microsoft project.
>> Yeah. Even if you don't ever plan to write anything public, write about the code that you're working on and write for yourself, and it will almost certainly benefit the work that you do.
>> Writing helps you crystallize your thoughts and make sure you have them all coherent, right?
>> Right. Last one, big tip, and this is a fun one to close on, go meet people.
It has long been said that I, about Python, that I came for the language and stayed for the community.
People have talked about that for years because it's still true.
Join online communities, go to local, regional, national, international conferences when you can, go to coffee shops, ask questions, tell stories.
You will meet good people like Michael.
>> And you, as we met at PyCon.
So I think this is really good advice.
I was thinking as I looked at your list, that you are somebody who is not >> Particularly metropolitan in terms of tons of user groups and meetups, I'm guessing where you live, it's probably a little bit of an extra challenge being in Alaska, right?
>> Yeah. I lived in New York City for seven years before I moved here.
>> Right. As a contrast, right?
>> Yes. But most of my programming work, serious programming work has been done while I've lived here.
Yet, I don't know anybody else here who programs.
For me going to conferences, I talk about programming the entire time at conferences because I never get to in regular life.
>> Honestly, that's true for me as well.
Even though I'm here in Portland and we have user groups and there are plenty of people who do programming, it's not that different for me.
Because I don't go to a company where I have a team of developers.
The people I work with, it's as real as this meeting with you and me here on a video screen share sort of thing.
I think this is the story of more people than just if you live outside of some big metropolis.
Yeah, yeah. Quick story. First time I went to PyCon, I was intimidated because I was a teacher and not a programmer.
And so I thought I would not find my place.
And I walked into the hotel the first night and people pulled me right into conversation.
And what I found was that roughly half the people who go to PyCon are primarily programmers looking for what to work on.
And roughly half the people are people who care about some other domain than programming.
And they're looking to use Python and programming to solve the problems they care about in their domain.
It's true, everybody has a place in the Python world, if you are respectful and appropriate to other people.
If you're shy or intimidated about going out to meet people because you're not sure of your place, just go meet people and you'll find your place, and it's magic.
>> Yeah. I think, hopefully I'm not misremembering this.
I think almost half the people at PyCon this year were first-time attendees.
If you're thinking, "No, I shouldn't go." >> No, it was like 70.
>> It was over half.
>> It was like 80 percent.
>> Yeah. I was amazed.
>> Yeah. I'm not sure how much of that's a COVID hangover sort of thing because there were not as many people who came as say in 2019.
So maybe they were more icon curious folks than say the people who had been there for the last 10 years.
Like I still want to skip this one.
I will see where it shapes up, but there's a really high number, whatever that number turned out to be in the equilibrium, is that there's a ton of people at these types of events who are like, This is my first time here.
So if you're concerned about going to these events and feeling like, oh, I'm going to be the one newbie and feel out of place, like probably the opposite.
- Yeah.
- You know?
- Yeah, you end up with lifelong friends.
- Absolutely.
People are in a great mood.
They're on their geek holiday.
It's all good.
- Yes.
- It's pretty easy to make friends and have a good time there.
So that could be PyCon or EuroPython or something like that.
Or it could just be a local.
There's a lot of regional Python meetups like PyCascades here in the Pacific Northwest, PyTexas, PyOhio, all these things.
And none of those work for you.
You know, there's forums like this, to be honest.
Like, part of the reason I created the podcast was to get to know people better in a way that I knew wouldn't be possible for me, right?
My goal was, where do I go find the podcast to listen to to do this?
And then there was none.
So I was like, all right, fine, I'll create the podcast so we can do this.
But my intent was just to listen to a podcast to kind of get to know people like this.
it's a pretty one-way conversation as a podcast listener, not 100% as people have seen in the audience, but it's still valuable to like eavesdrop in a sense on these conversations if you're a new person.
- Right, absolutely.
- Yeah.
All right, Eric.
Well, what a fun conversation.
Thank you for the awesome list.
And hopefully you've inspired a lot of people out there to make forward progress on this journey that they're on.
- Well, thank you for having me.
I've listened to you for a long time and really enjoyed your work and very happy to connect.
- Yeah, same here.
So final call to action.
People are interested, you know, maybe tell them how to check out your book, tell them how to put some of these ideas into action.
- My book is "Python Crash Course" from NoStarchPress.
Third edition came out this year, and so everything works.
It's good, I keep it updated.
If you buy it, you get a copy with the newest updates.
Yes.
I also write weekly at MostlyPython, and that's mostlypython.substack.
There are paid subscriptions, but there are also free subscriptions.
And so the only advantage for paid subscriptions is that some posts are locked for six weeks.
Everything I write, I want to be available to everyone.
And so if you're curious about what I'm thinking about on a weekly basis, mostly Python.
Excellent.
All right.
Well, thanks again for being here.
See you later.
Thanks everyone for listening.
Yes.
Thank you.
This has been another episode of Talk Python to Me.
Thank you to our sponsors.
Be sure to check out what they're offering.
It really helps support the show.
GlareDB is an open source database for querying distributed and disparate data.
Connect your data sources and use the Python tools you already know to ask questions and integrate data across data sources.
Get started today at talkpython.fm/glaredb.
Take some stress out of your life.
Get notified immediately about errors and performance issues in your web or mobile applications with Sentry.
Just visit talkpython.fm/sentry and get started for free.
Be sure to use the promo code Talk Python, all one word.
Want to level up your Python?
We have one of the largest catalogs of Python video courses over at Talk Python.
Our content ranges from true beginners to deeply advanced topics like memory and async.
And best of all, there's not a subscription in sight.
Check it out for yourself at training.talkpython.fm.
Be sure to subscribe to the show, open your favorite podcast app, and search for Python.
We should be right at the top.
You can also find the iTunes feed at /iTunes, the Google Play feed at /play, and the Direct RSS feed at /rss on talkpython.fm.
We're live streaming most of our recordings these days.
If you want to be part of the show and have your comments featured on the air, be sure to subscribe to our YouTube channel at talkpython.fm/youtube.
This is your host, Michael Kennedy.
Thanks so much for listening.
I really appreciate it.
Now get out there and write some Python code.
(upbeat music)
[Music]
(upbeat music)
[BLANK_AUDIO]
