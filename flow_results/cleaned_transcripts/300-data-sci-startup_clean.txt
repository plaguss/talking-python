You've heard that software developers and startups go hand in hand. But what about data scientists? Of course they do. But how do you turn your data science skill set into a data science business skill set? What are some of the areas ripe for launching such a business into On this episode, I welcome back for prior guests who have all walked their own version of this path and are currently running successful Python based data science startups. In this month honey from explosion AI, Matthew Rocklin from coiled Jonathan Morgan from yonder AI and William Stein from co calc. This is talk Python to me, Episode 300, recorded January 7 2021.
Does Morgan been too long since you've been on the show, by the way, it has, it's been a little while. So I'm in my background a little different. It was a self taught very much a generalist. I was a self taught software engineer in the early 2000s, when people started to when web development was beneath the serious software engineer, I was like, happy to do it. But it's been a few like that I can probably teach it to myself, and then really get into Python for that reason, that was right around when like Django was popular at the time. And that led to a career and I call it data science, it was probably more like machine learning engineering. Now that the field has matured, and we're getting more specific about what those roles are. And then most of the people here would probably know me from the podcast that I had called partial derivative with Chris Albin. And then video spandana. And we It was kind of a Yeah, that was a great podcast. Yeah, I enjoyed listening to it. We had fun. We had fun. I mean, it was about machine learning, and also drinking. And recently, it came back into the public eye, because it turns out that john awesome was a listener in 2014. And he tweeted at us, and everybody, I got a bunch of notifications on social media. And I was like, I don't know what's going on. And it turns out that everybody was like making jokes about this tweet that he made comparing our theme music to the radio, from Grand Theft Auto three, and just a small piece, a small piece of the news of the week, you know, excited that we were involved your small part of the political landscape
in a way where it's like a little bit part of the magic and the victory.
And in terms of actually turning it into a business eventually turned to project that Chris and I had been working on into what we thought would be an automated machine learning company, and has since been a company focused on using machine learning to identify agenda driven groups online misinformation, and disinformation helping companies deal with it. I was joking about your podcast tweet, but you're doing some legitimately important stuff around like all this information, spreading stuff, but we have so we're trying awesome. Enos, yeah. Hello, again. Happy to have you here. I'm excited to be back. And especially because last time I was on your show did talk about running a business. So it's nice to come back. Maybe? I don't know. Is it two years? Already? I don't know a bit after? Yeah, it's something like that. Yeah. And talk to what we've talked about what we've been up to. So yeah, basically, I actually I got into programming via web development as well. So I don't really have the typical software engineering, computer science background, I just spent my teenage days making websites because it was fun. Then I did a media science and linguistics, which kind of had nothing to do with software engineering like that. And I've ended up in NLP natural language processing, by accident, because it combined my passion for language and programming. And in Python was the obvious choice, obviously siphon as well. And that's how I ended up here. And then together with my co founder, Matt, who is also the author of spacey, we started a company in 2016, around it, which is called explosion. And yeah, I would say we probably best known for spacey, which is an open source library for natural language processing in Python. But we also build other stuff, we basically build developer tools for machine learning, or other commercial product is called prodigy. And it's an annotation tool that helps people create training data for models, which is a very important aspect as well. And so that's what we're doing. Yeah, that's awesome. And like, Matt, you have this open source library that is formed the kernel or the the seed of the company, that that you guys are working on. So maybe that's a good place to jump into the thing that I want to bring out the subset for everyone listening. And it's really relevant for folks in a data science world. But also, I think, anyone who has a developer in the broad sense, and they want to create their own thing, they have got some idea, some project that really has to do with developers, like, how did you do it? What did you create? So we're going to talk about your story, how you build it. So let's just, you know, jump into explosion. You mentioned a little bit about it. What's the history? And what is the product that you would say that you guys sell? Yeah, so basically, a quick recap of the history. It started with my co founder, being in academia, researching computational linguistics, and realizing that people were using his research called for real world stuff. And he was like, wait, no, that's not what research code is supposed to do. It's supposed to print a number at the end. That's it, like nah, this wasn't wasn't made for this. But it was clear that there was an interest. So he basically left academia to write spacey, which is a library that's focused a lot more on production use, as opposed to many other research libraries that focus more on doing natural language processing research. And so I met him sort of by accident as well, we started working together started as I joined a spacey development core team, which was for a long time, only the two of us. But we also quickly saw, okay, there isn't always the plan to start a business around it. That was from day one. We're like, okay, let's actually there's a lot of money in there. There's a lot of interest in there. We can do this. So then we basically we launched prodigy, which is an annotation tool. And that's our first commercial product. That's how we started. That's how we making money. So we're basically saying, hey, if you power user of other tools, and we can clearly show you we can build good software, you likely want to train your own models and take it one step further and we have a product for you. We have a tool for you.
You can use. And that's the commercial offering. We very much like giving people do you know, we believe that people should have transparent tools that enabled them to build custom stuff, not like cloud services or models that they can control or data that they have to send to us that we can then use for something. And then we also think that developers really own what they ship and what they do. And yeah, there's also fastest built in allow, providing these types of tools for people that really you can just download. That's the thing with prodigy, you literally can buy it, download it, you own it, you have it. But back in the day, when Adobe still gave you Photoshop, and you add Photoshop, and you're like, great, I can work with that. Now it's all like in the cloud, I've paid so much money to Adobe for their tools. And I don't know if next month I'll have it or not, do I know exactly. And I think for machine learning that's, that's really backwards. Because it's you should be able to pick up your project in half a year. And it should still work. And it should be able to keep working with the tooling to at least to some extent. So that's what motivated like our first one. And it also meant that if we want to run a company, that way, we do have to have a sustainable business model, like we currently were 100% independent, and we also profitable, which also means we can give our user base that sort of security. And we can say, look, we're sustainable project, we're not you're not the guinea pigs, we're not treating you as a stepping stone to a grand exit, and then we're gonna shut everything down and leave you alone. That's not what we're doing here. Yeah, I also think you've got a really popular product with spacey. And
I think, historically, there's been a lot of apprehension around. Well, there's this commercial thing, and it's mixing in with my open source, and what evil influence will it bring in, but to me when you've got libraries like that, but you have a company, who has a really strongly vested interest in that just being better and still keeping it open source, but now you've got ways to get more. I think that's a really positive thing for these open source libraries. Yeah, no. And I think that was definitely the motivation. That's also why we didn't do any open core thing were like, all parts of the open source library are free. And then you have to pay if you're like a commercial user, or support as well. There's some support, that's great. But often, it means you want to get get to provide support if your documentation is bad enough that people need support. And I think that's fundamentally a bad business model. Absolutely. Awesome. All right, I'm gonna just go along with the tab order in our screenshare here. So, Jonathan, tell us about yonder. You gave us a hint as everyone did, where we're going with this, but the internet is alive. I hear a long time ago, I started doing some research using early Python machine learning tools to try and work with other subject matter experts to get a sense of how extremist groups were spreading propaganda were radicalized in the internet. And so in doing that, we found that there are some patterns to the way that people accomplish their agenda on the internet. In some cases, that agenda is like, really nefarious. Yeah, like one of the things you and I discussed way back in 2016 was, guess what, after the baby was 2018, after the election, a whole bunch of the internet, social media turned out to be bots with their own automated agendas. Right, right. Right. And I think that was like, I mean, now in the past five or six years, everybody's come to accept that this is maybe just how the internet works, like a certain amount of it is automated. And like sure there's groups that are like trying to convince you of something that maybe you'd call it propaganda, or maybe you just call them like Kpop stands like screwing around like everybody's we kind of get it now like the internet, sort of like Mad Max. And, and it's really different, I think that everybody might have thought it was when it was more like people taking photos of their lunch and putting it on Twitter. And so the kind of the cool thing that we found was that the same way that you'd go about discovering like a group of ISIS supporters was also the way that you'd go about discovering anybody who was working together to pursue a shared agenda. And it turns out that's actually really interesting and really valuable. And now you get kind of some hints about the subculture of the internet. really early on, we, when the company had a different focus, I thought maybe this would be an opportunity to actually take the model, like to also build on top of an open source model, like we had a way of doing automated exploratory data analysis that we thought was really interesting. Like heavy on pandas, we actually started using dask and cython. Towards the end to make it a little faster. It's awesome, like to have the other guests or even their their creations together. Yeah, I don't want deployed desk services. I know a company for you. I've heard of them. I think they're right down the street. But then we actually ended up going different direction like we we found that we were solving what could be a really big problem, potentially, like a really big market, lots of customers, maybe something that might mature over like 10 or 20 years. And so all of a sudden, we went from thinking that we maybe had a really cool idea that we could build on top of incrementally to maybe a really big idea that we need a lot of money to go pursue. And so very, very out of my comfort zone as somebody who spent, like my entire career focused on tactical products and software engineering, was we went out to Silicon Valley, and we raised a bunch of venture capital, we kind of went the other way and thought, like, Alright, like, let's go build a high growth, like a venture backed startup. And that's what we did until we've been doing that. That was about four years ago that we made that decision. And, yeah, the company went from a couple people coding over zoom to, we've got 25 people. Actually, we had a little more than that. A little bit larger company than that at one point. So it's like, Yeah, I don't know. We played around.
pretty quickly, it's pretty big like, my day to day is changed like 1,000%. less time, Phil in JIRA tickets, yeah, less handling JIRA tickets. And now it's like, if I'm in the code, everybody is uncomfortable, I've had to learn to I shouldn't even joke that I will be in the code anymore, because now we have a team of like, really sophisticated, excellent, like data scientists and software engineers. And so and as I'm getting rusty or and Rusty, or that's really, it's just not a good idea. And everything is so out of date. And, you know, obviously, like technology's changing, move on, and it's easy to get a date. So, yeah, a lot of time, dude, being a startup executive? Well, I mean, look, that's pretty awesome. Actually, I was just gonna add in of like, mixing all these technologies together. You know, fast API is one of the new amazing things that sort of tied in with Enos. Right, Sebastian, as part of your company? Yes, yes. That's super cool. And
this portion of talk Python, to me is brought to you by century. How would you like to remove a little stress from your life? Do you worry that users might be having difficulties or are encountering errors in your app right now? Would you even know it until they send that support email? How much better would it be to have the error and performance details immediately sent to you, including the call stack and values of local variables and the active user recorded in that report? With century This is not only possible, it's simple. In fact, we use Sentry on all the talk Python web properties, we've actually fixed a bug triggered by a user and had the upgrade ready to roll out as we got their support email, that was a great email to write back, we saw your error and have already rolled out the fix. Imagine their surprise, surprise and delight your users today, create your century account at talk python.fm slash century. And if you sign up with a code talk Python one a 21. It's good for two months of centuries team plan, which will give you up to 20 times as many monthly events as well as other features. So just use that code talk Python 2021 as your promo code when you sign up.
Next up in my tab is coiled. Matt, tell us about it. Maybe that'd be a better sort of just how about dask? And like the various stages? There is something better here. Yeah. So we started with dask Anaconda, Anaconda at the time was making most of us money as a consulting shop. And so we got clients that were either like government grants, or hedge funds, or were banks. And we had made some good software, they said, Great, we want you to add features, we want you to help us use it. And so we were sort of like the standard consulting shop approach, I think is a great way to start a business, you get a lot of high touch feedback, you can move very easily. I think that was a good way. Eventually, sort of das became big enough, and Anaconda started doing other things at the time, that I was gonna go off and make a new company and video actually stepped in then. And they said, Great, if you want five or 10 people, we'll just hire five or 10 people around you to work on desk and rapids. And so then we work a different model, which is making open source project within a giant tech company. And that's like a different set of customers, we need to show how dask sold GPUs, right, that's very different than a consulting shop is to say, we got a library that inspires people to love CUDA cores. Yeah. But at the same time, like, you know, it's pretty easy to show that dask generates, you know, $50 million of sales of GPUs, so great. Like, here's $10 million first or some other activity. And so that was just like a different kind of play. There's different incentives. But if you can use it to distribute advantage, you can get things done. Eventually, it got bigger, didn't make sense to be with an Nvidia entirely. And so they went off and made a different company. That company is coiled. We sort of started actually is we wanted to bootstrap, but was pretty close to this year, right? early this year, was that what we were, we're like coming up on our birthday in about a month, I will be one year old and a little bit. And the main problem that Coyle solves is like setting up it things around a desk. Distributed services, as I'm sure all of us can attest, are like annoying to set up, especially in like more of enterprise environment. And so coil sells a lot like IT infrastructure that makes task much easier to use for anybody. Yeah. And the cloud is fraught with, oh, let's just set up a bunch of clusters. And we'll put this in an s3 bucket. Oh, wait, it's hard to talk to the s3 bucket. So make it public and then forget that it's out there or some other horrible thing like that, right? It's, it's good. That's an hour just to set up. Kubernetes is maybe a good a good example of that. Attending the Kubernetes cluster is like at least a half of an FTD job. If you can remove that that's actually worth a fair bit of money. Yeah, yeah. So your company is basically dask as a platform. Yeah, that's, yeah, that's a service. Yeah, the pitch, you can pip install coil, then import coil, and you can get dask up and running in about two minutes. We actually run our own enterprise product in the cloud, for sort of a public offering. And it's if you want to scale stuff, it's probably the easiest way to do it. Anyone here wants spend a couple minutes. It'd be fun. Sois fun. Awesome. Yeah, very cool. We went we actually started sort of the bootstrapping way and then like venture capital was attractive enough that we ended up going that way instead. So we're like, on the venture capital boat now for better for worse. Yeah, sure. All right. So we got two VC votes, one non VC vote. I do want to say like, look there
No, no, no. I mean, like, sort of Pat, let's fast. Yeah, like in for the infrastructure and businesses, that's just to have a resource intensive, you're not going to prepay for all the cloud hosting that you're going to sell to the people that make sense. Yeah, my point is mostly that hey, not every business has to stop and subscribe to that sort of startup playbook. Basically, that's all I'm saying. We went five or six years before doing this, right. If you like, how Anaconda that Nvidia has different models. I think we should not have started as VC funded, we would not have, we would not be nearly as successful as we are today. Yeah, so I'm sure you've probably got a much better deal than you would have gotten otherwise, as like, oh, a seed company with his grand plan. financing is like a super normal part of running a business. That makes sense, although I would say having done both having run a small consulting company where we lived out of our revenue. And now having done this, it's hard to imagine doing this without having done the other one, like without having to run a business where he really didn't have to care, like, yeah, on paycheck to paycheck, cash flow, to manage cash flow in that way. And now, the numbers are bigger, but the principles are still the same. And not having learned that like learning those same lessons with delicate checking account balance of the size would be I mean, people do it all the time. But man, that would have freaked me out.
Yeah, for sure. It's still scary.
Imagine.
All right, William, Last, but definitely not least, tell us about your Sage math as a platform with cocoa. Yeah, so I started coat calc after teaching a lot of courses, various places. And basically one thing happened, which was that I was getting frustrated with grant funding for development of sage math through academia, because what are you proving like what theorems or new research is being generated by doing this? Right? And so I think it's a lot but it's hard to, you know, nail down exactly what research Yeah, there's like an extra step, you build the software, and people use the software. And then that inspires, creating a conjecture or figuring out how to prove something. So there's so many steps along the way, and the link can get lost. Yeah, certainly lost on committees. So I got frustrated with that. And then also, at the same time, sage math is really big and complicated to install. And the distribution problem for word is pretty difficult. And getting it to work under Windows and OS, 10, and so on is, is really painful. So trying to kill both birds, once I started cook calc, where the idea was that it could generate funding that could go towards stage development. And it would make it a lot easier for people to use Sage without having to install it on their computer. kukoc has made it easier to use sage and a lot of other open source software. It hasn't really provided any funding for Sage yet. But there's a lot of years to go. So we'll see how things go. Absolutely. I launched the product in 2013, I think actually launched something, and then started a company in 2015. I spent a couple of years trying to work with the University of Washington where I was a tenured full professor, to start up a company while being a professor and sort of spin it off from the university, the thought was surprisingly frustrating. And so I ended up getting, I ended up finding an angel investor from outside the university and then working with him to start a company separately. And dealing with all the IP issues in case everything got sorted out. I spent a couple of very painful years training two people to full time college professor and a CEO of a small tech company. And that was extremely stressful. And I can imagine because being a professor already is like multi pronged, right? Yeah. researcher and a grant writer. Oh, yeah. And also, you're a teacher, right? And your schedule gets very packed with very specific things that have to happen at certain times and can't You can't move. It's not like you can just say, Oh, I think I'll teach this class to 100 people An hour later today, because I'm busy with this denial of service attack or something. Yeah, exactly. So it just got a lot of actual moments precisely like that, where I had these two conflicting responsibilities at once, where the site was being attacked by some denial of service attack. And I was about to teach a class. And I had to choose, which Am I going to deal with? Oh, my gosh, yeah, it was very stressful. I can jump in briefly, I'm actually curious if there are advantages, like were there lessons that you learned as a professor, that were really useful in running a company? Hmm, I learned the only thing that was really useful, and it was very, very useful as understanding professors. So I have a pretty good understanding of the perspective of a professor as a potential user of CO calc is very good, because I spent well over 15 years as a professor, so I can understand their perspective. But almost every intuition I have ever had in academia, in terms of how to do things is opposite of what I should do in business.
Or startups, just everything was just reversed, for me at least. So I decided, what is my gut instinct for what I should do question and then possibly do the opposite. The rules are just so different. For example, in academia, you often apply for a grant and then find out six months or a year later, and see how this like really slowly
Long Term process, whereas in the company's industry, you need to adapt quickly to what's trendy and what's important to users. And also even hiring, it's just such a different cycle in academia where you apply for a grant, then you get a position for a job, then you hire somebody, that's a few years from when you decide you want to hire somebody until you hire them. It's just a different scale. But I love both situations, but I couldn't do both at once. Fortunately, my wife got a very good job as an academic, and the company started making some money. So I got confident. And so I quit my and this was really hard to do, I quit my tenured, full professor job, just quit it. I remember watching the video where you announced that because it was on YouTube, and it was going around Twitter, and I'm like, Oh, this is gonna be interesting. Let me see this, because that's a big deal as a tenure track. Professor at a university like University of Washington, Washington, University of Washington does a good job in a very nice, the department's great for research. And I never thought I would quit attended chocolates, I had one that I liked a lot. And I thought about it a lot, but just never thought it would happen. And then it kept not happening until it suddenly happened. And it just felt like the right thing to do. Yeah, so then had a pretty stressful couple of years, with other people working with the company, the infrastructure and running Kubernetes. And other things melted down occasionally, I really, really wanted to get cocalico in front of people. So they would use it so that I would know what to develop, so that they would then use what I developed, and in order to do is a delicate balancing act with getting it in front of people, but also keeping it running. I got a lot more stable over the years. And now like the one sentence summary of what it is, is it's a web application that lets you use open source data science related software collaboratively without having to install anything yourself. And where the collaborative aspects go way beyond just Jupyter Notebooks with real time collaboration to real time collaboration, terminals, all kinds of files that you're editing, video chat. And also there's things like the file system gets snapshotted frequently. So when you're collaborating with somebody else, you need to know who did what, or, or undo things. And so there's also a good attribution. So as people are editing your document, you can see who did what a very high resolution. So it's mainly used by academics in teaching courses. Basically, it's a product that the main users are professors and their students, right. And so I think it's really interesting to your thinking, you might not be leaving this academic job, but your time there is really critical for helping you understand all the users right, yeah, very, very critical. And of course, I learned a lot of mathematics and having taught dozens and dozens of classes over the years, that gives you a certain perspective. And then the other question, so he, there's six angel investors in the company, there's no venture capital investment. And we've been profitable for about a year now. There are three people that work full time on Coachella. And we our bank account is going up every every day. That's awesome. If it's trending up and not down. Yeah, we have no plans to raise further investment. And all of us really want a company that's relatively small, profitable, and not dependent on investors, like, basically review our customers who are paying us money as our investors in that they're, they're the ones that are driving our development direction. Yeah. That's awesome. Congratulations. And it's what we're all comfortable with what we want just a different model. Yeah, sure. That's, that's really great. I'll throw one thing out about myself, and then get back to question. So for me, my full time job also is the stuff I'm doing here with the podcast and the online courses. And I didn't get investment actually started on Kickstarter. So I reached out to all the podcast listeners that I'm going to do this thing, we come help me a Kickstarter fund within 12 hours, and it was off to the races. It was fantastic. So this is all these different paths, right. So I think may be a good place to move over to talk about Nexus. We all see where you've been. That's really the slight variations, but also the commonalities of what you believe is awesome. But William was just talking about it. You've got this great job. Maybe you have a great job, but you like paying the rent and having some kind of job. But how did you decide it was time to quit? go all in on this? Or did you like me, I started the podcast while I had a job, but then quit and then started the course side of things. What was the path? And how did you decide it was time? Actually, it's funny that we would just talk about all academia and grant proposals, because for my co founder, that was he, he was at a point where he had to write grant proposals and as a postdoc, and he was like, Nah, I'm out of here. That's not what I want.
And so that was for him to point and yeah, for me, it happened like so I was also in a privileged position that I was living typically live in Berlin, Germany is a nice city with a good standard of living while also low cost of living. So I was able to say, Hey, I'll try this. Worst case, I go back to being a freelancer. As I was.
Before I'll always find someone to pay me enough to live. So why not just do it, it was a good time to do that. But it was no major. And it was kind of sick of what I was doing before. So it just fit in felt right. And I was like, Okay, I'm privileged that I can do that. Yeah, fantastic.
This portion of talk Python to me is sponsored by linode. Simplify your infrastructure and cut your cloud bills in half with linode. Linux virtual machines, develop, deploy and scale your modern applications faster and easier. Whether you're developing a personal project or managing large workloads, you deserve simple, affordable and accessible cloud computing solutions. As listeners have talk Python to me, you'll get a $100 free credit, you can find all the details at talk python.fm slash linode. linode has data centers around the world with the same simple and consistent pricing. regardless of location, just choose the data center that's nearest to your users, you also receive 20 473 65 human support with no tears or handoffs, regardless of your plan size, you can choose shared and dedicated compute instances. Or you can use your $100 in credit on s3, compatible object storage, managed Kubernetes clusters. And more. If it runs on Linux, it runs on the node, visit talk python.fm slash linode. Or click the link in your show notes, then click that create free account button to get started.
We're just talking about it. I started working with the commercialization office at the university like meeting with them every week and reading the rules of the university and realizing they're gonna help me do this. Wait a minute, they're not there's a lot of legal and intellectual property issues involved with working with an employer while working on something that you want to your business. Yes, it's very tricky, basically a lot of Jeopardy with being an employee of the University at any amount above like 5%, in terms of them only what I do. So it got complicated that way. And that was another motivation. For me, it was just that I couldn't find a way to both work the university and for example, for investors have any confidence that I owned what I was actually doing. Oh, yeah, that's interesting to think of it from the investor angle as well, universities for people don't know, they take a good chunk of what is created there, they take a percentage of grants that they get and stuff. So yeah, it could be interesting and tricky, especially when it's commercially valuable. So they, they don't care so much about just a completely non commercial open source project. But they can be pretty well, they want to cut up businesses. So yeah, makes sense. I talked to other another faculty member at the University of Washington, who's he had written some software in the company that the university wanted a huge license fee for him to be able to use it, like several dollars per user 50% of all the money the company made. So it was a horrible experience. So worn away from trying to it was nerve wracking, trying to balance that it's hard to have a job at a company at the same time as you're trying to start another company. It was the same for me, I work for a company that did online developer training, there's no way I could create another online developer company while they was writing my contract, don't do that. That will be ours. If you try that sort of thing. I think you can only really have one job. But that's something we often say it's like, yeah, there's lots of fly companies, we could start in businesses, we could stop and you can only really run one company. And if you have to have a clear vision and do the thing like you if you try to run like five different companies at the same time, that usually doesn't end well. Yeah, well, then you are running like five habits.
I think the same is actually even true. Like it's a pretty popular model that are I think it's like a, I said this is having run a consultancy that tried to do this, it's a little bit of a pipe dream that you can take consulting income, which is easier to get, especially for technology at the margins can be pretty high, right? In the short term. It's let me do this thing for two weeks, so we can eat and that'll keep us going. Yeah, it's Yeah, then we'll use it to make a product like we'll use our consulting work to somehow make a product out of it. That's what we mean, kind of No, that's not what we did. We call it we raised the client round. So we just did consulting to get some cash in and then build the product. But yeah, yeah, exactly. Like it can be one. And then the other. Yeah, people often don't understand that. And they think that like, you can just take on consulting gigs, they'll in aggregate will like become a software product. And I mean, there are definitely examples of people who do it. There's always an exception, like I know people have done that successfully. But at least in my experience that was remarkably hard like it was we've reached the point where we have to just say, we're going to set the consulting work aside. And then we're just going to go focus on making this a product so that we can do the things that you do when you do a product when you actually build the product. And you don't necessarily get caught up into what's the next feature that we need to do. Like, how can I split my time, like split the focus, like you were just saying, and it's so easy to get that split focus between a bunch of different clients and this consulting business, and then also trying to figure out how to go, like thinking more like long term product development. It's really hard to do two things. For me at least it's super hard to do two things at once. And I'm really good at doing one thing I really, really value doing two things.
Matthew, how about you? How did you decide that it was time? Oh, we just had like intense user pressure to do this. Like when we made coils. There were a bunch of banks and hedge funds who were happy to be customers day one, right.
It sounds like you
It's great for Matt, because he just had these people lined up. But you did the work for years to get to that position, right? You had built up to ask you had built up those connections. And so when it was time and many others to be clear, like,
because only you are on the show, and he's speaking to you as a whole of yours, like the Royal royal, I guess, yeah, yes, like intense user pressure at every stage, right? Like we just grew bigger than Anaconda support at the time. So we went to Nvidia, we grew bigger than Nvidia exports, we made coiled. Yeah. And so we probably did it late. Maybe it's like the replay of the counterexample. Like, we probably could have started this a couple years ago, and then just fine. So maybe we should have like, we could have been sitting here, my millions of billions of dollars. Or somebody could come to us and say, go back in time, five years ago, here's the best choice you could make.
I mean, generally a little like, like making a company is a risky thing. And you need to be somewhat risk tolerant. Like I was not very risk tolerant. I'm actually a pretty risk averse kind of guy. Yeah, me as well. I'm exactly with you. And it was really super scary for me, because like I described, I had to quit my job, I couldn't try it. I had to quit and then try it. And I had just gotten a new job that was really well paid. And two daughters who are in college got to pay their tuition, not a ton saved up a mortgage. I mean, it was not like I was just 21. And living in Thailand with low expenses, right? It was consequences of failure. But the more I thought about it, the thing that helped me was, I thought really hard. I said, Okay, well, what's gonna happen if I fail, I'm probably gonna have to go find another job. Maybe it's not exactly the technology I want. It's not exactly the commute that I want. But the worst case scenario is that I get a job. That's a lot like what I'm doing now. So to me, it was like, Well, if what I'm doing now looks like failure, maybe I could do better. If I can just fall back into this not failure, per se. But like, the landing zone looks like what I'm doing, why don't I reach a little higher and see if I can go do something else? You know, that was my, that sounds more like calculated risk taking? Yes. Fine. I mean, it's not like you moved your whole family across the world to become a rapper or something. Yes, exactly.
I did that when I was like, What the fuck? Yeah.
That's a great point. Yeah, I think it was very calculated, I definitely took a significant risk. Because I had a math professor job 10 years at university and my wife had, it has a very good tenure track job not. So he saw the two people at the same university of problem and all of that, that is very hard to solve. So yeah, recreate that is not easy. And then when you quit a math research job for a couple of years, and then tried to go back, that's really, really hard as well. extremely hard to because you're competing with a bunch of young people who are doing all the trendy stuff, to try to get a job again, and at the same university, I'd be really, really unlikely. So it was pretty risky. So I didn't quit until I was maybe overly confident that we were going to succeed as a company. Maybe I was less confident knew Matt that. But I, or maybe I should have been less confident than I was, but did work. So far. It's gone really well. Yeah. Fantastic. What do you all do to prepare? Did you make sure you had a certain amount of savings? Did you try to build up connections? What did y'all do already had those things? I think what I did is I talked to a lot of people, I think I recommend anybody like I think making a company is a lot of very quickly becoming an expert, something you know nothing about and making a really informed decision. And a lot of it has to do with just talking to people. And so like, you know, you just find a lawyer, great. You talk to the people who who know who know, lawyers give you introductions. After you talk to three or four lawyers that you kind of know how that conversation goes, you're now able to choose one you choose when you move on. And I think just having a bunch of phone conversations with, you know, not 10 people, but 50 people, and also the right people, like I talked to the wrong lawyers at the University of Washington. And it was very helpful when I talked to the right lawyers, actual law firms, and it was incredibly helpful. Yeah, interesting, makes a huge difference. Ultimately running a company, you have to make lots of decisions, and most of the decisions have to be right, and you have to keep making the right decision in a row. Like that's kind of is a little magic about it. If you're wrong, that's fine, then you have to try again. Well, ideally, you shouldn't be too wrong. If you're too wrong, then that's not good. Or at least wrong quickly.
Yeah, yeah. But I think I think that's also why I don't know if you're doing if you really trying it out and doing something real, I think that can really help. But that's why I'm doing a real business where I don't know you want to be profitable. If you start doing that first, that helps because you see the money coming in. It's otherwise it's often very easy to spend a very long time doing the wrong thing, because you have the cash to do so. And then we can crash and burn. You know, there's real demand there. The real thing there that helps because you see, notice that you actually can make wrong decisions. You just can't make them for very long. You'd be like you're gonna make wrong decisions. I think you just can't like you got to do but also accept that you're wrong. And you do have to, to not dig in too much. But I think a lot of it isn't about making the exact right choice. It's just about adjusting and adapting on a day by day basis. And also the make sure that the potential downside if you make the wrong decision isn't fatal. Like with climbing a mountain, you can make some wrong mistakes, but make sure you have an ice axe.
Stop, you can just not do much. Exactly. Yeah, yeah, I guess that's maybe the analogy. It's like, if you're building a rocket to go up that mountain, that's much more risky, because then your rocket has to work and your work is gonna be really expensive to build. if that works. Amazing. You've made it up the mountain in like, a few minutes. But if it fails, that's it. What else if you woke up? At least a bit? That's pretty good. I like what you said a second ago. I think it's actually especially for people with technical backgrounds, I think it's really important to hear that there's that the only way that you know whether or not your business is succeeding or not, is if it's making money. It sounds like a silly thing to say out loud. But I think for a lot of technologists, that's it, there's just no, you can't, it's easy to convince yourself that there's a lot of other ways that your business can be successful. And there's a lot of ways that a project can be successful. Because you build a great community, maybe your open source project has a lot of users that solving a problem that you care a lot about, like all of those are totally valid things to make a project successful. But if you're starting a business, the only way that it is successful is if it makes money. I think that's like, yeah, you kind of have to accept it and know whether or not that's something that motivates you, and whether that's something that like if you want to keep score for your project in that way. So I that's exactly how we see it. I mean, you said it kind of in passing, but it's like, yeah, yeah, I think I've said before, like profit is the best KPI. That's what you should, you know, look at ideally, if you can, it's a huge difference from academia. Where success of a grant proposal is that you wrote a paper that got published in a good journal that people cite, which is not it doesn't generate, it's just such a different metric. Basically, yeah, it really isn't. It's easy to think, this thing that I love, I don't need to make money on it. But at the same time, if you can manage to do it, all of a sudden, not two hours a week where you're tired, you can spend a little extra time on it, like you could put all of your time and energy into it. And another thing that I think's interesting to think about is if you're able to make something happen, create some project, create something that you're working on on the side, if you can make that somewhat successful with two or four hours a week, if you manage to spend 40 to 60 hours a week on it all of a sudden, well, it's a whole lot easier to get some traction than if you're just scraping away when you're tired at the end of the day. Yeah, but I think especially if you're starting out as a side project, like, I know, a site business site, the business fundamentally is not a business, if it you know, at least has a side business. If it doesn't make money. It's an expensive hobby, if it's something you do on the side. So I think if that's the approach you take where you say, hey, I want when it starts something on the side, and then maybe turn it into something bigger. I do think a good plan is to make money. Yeah, I totally agree. Yeah. You when you were on the show before, as you pointed out, maybe it was just in your talk, you said it's okay to charge money for a thing that you put a lot of energy into to have people support your company, right? Yeah, it was
nice to spend money. It's this myth of companies don't necessarily use open source, in my opinion, because only because it's free. It's the whole spirit of open source. It's available. It's good. It's also advanced, you download it, it runs, you can program with it, you can work with it, you own it, and you own the result. That's what people like about open source, not just the fact that it's free, I think almost in spite of the fact that it's free companies. Yeah. Because so often they're like, who do we pay so that we can yell at them and get it fixed? When it's not what I want, right? Yeah, exactly. Yeah, yeah. So and that's something we've also used to motivate the way we are building our stack. And even if it's not free, may not send in its commercial, it can still have the same spirit of open source. And we found that this is very popular with developers and people really like our tools. For those reasons. Maybe that's a good segue over to this sort of mix of open source and business models. There are a lot of open source projects that gets so much energy and it just it boggles my mind that the person who's working on that project, it's not just entirely successful for them. I'm thinking of requests or Django or flask or these things where it really is being used by so many people. Surely there's enough support for the person who's writing, just keep writing. And all of you are examples of how can I create something that I'm selling as a product that also supports some open source thing that just makes it better for everyone? Even if it was just the open source thing that they cared about? What are your thoughts on having some paid thing that's not necessarily supported by open source, but it has a kernel of open source around it, or in it with CO calc, the actual software, co calc, maybe 50% open source like there are actual web application a lot of the backend is closed source, we other an open source version that you can install in a Docker image. That's entirely open source. But the key thing that's really open source about kukoc is all the software that you use when you're running when you're inside of kocak itself is open source. So you have access to Julia and octave and R and Python and Jupyter, notebooks and, and sage, math and all this other stuff. So it's really, we have a product that benefits a lot of open source software and open source data science software does well. And so our interests are very aligned so that the product benefits from open source doing well. Unlike say, Mathematica
Which kind of the opposite it doesn't benefit of open source as well, yeah, but we, on the other hand, I tried for a long time to make coke entirely open source, just top to bottom. And it really made investors nervous. And it made employees nervous, who are going to spend 60 hours a week working on writing the software, they're worried that some other company could just take exactly 100% or software without permission, or whatever, and make a site that offers the same thing and charges exactly half as much, or something like I don't know, there necessarily needs to be an expectation like, because you run a platform, the entire thing needs to be given away, right? Yeah, we run a platform that is not entirely open source, but it makes it easier for college professors to use open source and teaching their classes of benefits open source overall. Yeah. And, Matt, you're sort of in a similar situation with a platform story? Sure, I think maybe like all of us are in a shared situation of, we have a free thing. That's like the main value. We'd like find some like peripheral thing to sell around it. Maybe it's consulting services, maybe it's support, maybe it's a dev tool. Maybe it's like an IoT solution. And we're selling to a part of a company that's slightly different from our user base. And that requires some finesse. We're all navigating that space and exploring that space and seeing what works and doesn't work. There's lots of ways to make that work. Yeah. So how did you decide what you're going to sell? People ask? This is what I got for free. I need more. Yeah, complaints that everyone has, it's really hard to deploy this stuff that's like the it buyer rather than data science buyer. Like they're very used to spending money. It made sense. It makes them a proprietary to sell them. That is like that fit. Also, like I think a lot of companies have done this before, right? This is like the data bricks play. This is kind of what Cloudera does. This is a very common playbook. There are other great common playbooks, like dev tools, like other other systems. So lots of challenges to this too, right? Like, I happen to have like a large lot of control over the free thing desk, I'm very tempted to do things to the free thing that like benefit the company. And so there's definitely like things that you need to watch out for. In this space. It's not all I think we're all gonna say it's all great, because I guess this can also be positive. Also, it can also be positive if it's aligned, for example, that's what's the case. In our case, our tool prodigy also uses spacey, so I'm not too spacey users use prodigy to create training data for their models. So we've actually become very, very active users of our own open source software ourselves. And we make lots of improvements that do benefit our product, and vice versa. And everyone benefits from that weren't exactly the same situation. Yeah, but eventually like competition arises, and then like I can make this change in das, which definitely benefits my product does not benefit my my competitors product. Right, I feel like it's a little bit like open source software, kind of like being in the ocean, like in a rowboat. And there's a really strong wind, which is business, there's like, if you can capture that wind, you can go a lot faster. But the wind isn't going in quite the same direction that you want to go in. As you build like a sail, you know how to learn how to attack, you need to like learn how to like to harness that wind to go the direction you want to go way faster than you could on your own. But there's actually like building like sailing stuff is actually really hard. And that requires a lot of nuance and a lot of like thought. And we're all kind of building up our own sails and our own rudders. Yeah, that's a cool analogy. Jonathan, how about you. So you're interesting spot where our whole stack is based on top of open source Python. And I think we benefit hugely from that, I think, the where we actually had an interesting way that was important to us. As we were giving back to the open source community, we did a lot of research that was publicly funded research that was focused on how do we automate different aspects of machine learning? And then in some cases, like, how do we discover some of the patterns like what our approaches or strategies that discover some of the patterns of the way that information gets disseminated across the internet. And so both in a research capacity, so we've actually published research about some of these different projects that we worked on, like academic research, which is cool thing for a company at our stage to be able to do to have the opportunity to do and then we published some open source libraries that some of which we use, and some of which, like we've actually abandoned, like, they weren't, like, we haven't abandoned the libraries, but we've abandoned them as features inside of our product. So they're no longer kind of like a key component of what we do. But something that was important to us at one point, like helped us explore a really important idea, and then do have some adoption in the community. And in fact, there's a few that I think are embedded in other companies platforms, which is kind of cool, because a company in Austin called data that world which is a data catalog company, also built on top of like open source routes, and I think some of their data visualization libraries. And then some of their like, data inference libraries are built on top of some of our open source projects, because we were more closely aligned. So it's definitely a part of our DNA and part of our culture, our technology and engineering culture. Although we're in a slightly different position, that the thing that we sell is like a we have it's like an enterprise intelligence communications product. It's a little more like a traditional company that just uses open source instead of where the company behind this project plus or something. Oh, totally, I think a lot of like, you're talking about users who are very technical, you know, like professors kind of teaching technology or like it or developer users. Our users usually have a BA in communications with a minor in college.
sigh and find like spreadsheets to be overwhelming because it's like it's the data, you know what I mean, like. And so in a way, like it's helped us be focused on being really empathetic and how we present like analytics and output. But they're really far away from like a traditional technology. Yeah, yeah, very addressing. All right, well, getting near the end of our time together. So let's maybe close this out just with two quick final wrap up and some questions that the audience threw out there as well. You all have made it, I would say, like you're all building successful stuff, you're making progress. Who knows what the future holds, right. But it looks like you're doing great stuff. And you've made that transition to where you want to be. But a bunch of people out there listening are dreaming of doing something, but that maybe they're not really sure where to start? Or what to work on. What advice would you have for people who are thinking of trying to create their own data science related type of startup? And what areas? Do you see that they might focus on? giving advice? Because it's all there? In terms of areas, I want to I do want to comment on the area. So one thing I see a lot in our field is we only just at the very beginning of like machine learning Ops, and for the lack of a better word, I don't know, operational stuff, like how to, you know, really take like your project from a prototype to production and make that smooth productizing, your actual exploration? Yeah, yeah, just you have like some researches hacking around in notebooks. And then you also want to ship something into production. And there's all your data you have that you have that sort of this, that's very, very early stages. See, but I do think there's a lot of room for innovation here. And also innovation, that's actually, you know, useful to the developer. And that really integrates into the existing workflows. Because I think one problem we do have with a lot of companies that went for the enterprise first type of thing is that a platform like that only works. If you own the whole workflow into end, and you want to be the one platform, everyone uses it. Many people are trying that at the moment. And some companies may succeed, some won't. But that's very unattractive to a lot of real world scenarios. Because if you give someone the choice of like all or nothing, people have to be like, Oh, if I don't want all I guess I have to go for nothing. I don't want this thing to own everything. I just want a tool that helps me do stuff. I think there's a lot of low hanging fruit. That's a profitable Monday. Interesting. Yeah, yeah, you're so right. I think where we've spent the most of our time and just technical churn is in that prototyping stage where somebody got to run in a notebook or somebody has a little script that they run from the command line. And then the how to go from that to Oh, yeah, hold on, I'm going to deploy to a Kubernetes cluster, we're going to run it like in parallel to on 1000 machines. And there's a lot of really great tools for whatever that is, and we're going to make sure it's running all the time. Oh, not the weekend. Yeah, exactly, totally like infrastructure as a service until the cows come home. But then there's that middle ground where it's like, well, what we really want to do is we want to put this into a simple pipeline. So it runs every day, we want to put it in front of a few users, like we actually just want to run it on like real world data that updates every 24 hours, that like kind of toy pipeline step like what you might call like an alpha, if you were making application software, or something, or what did that pre alpha or a B testing, like all of that that workflow, like I think right kind of where you're talking about it as it's like, I that it doesn't seem to exist. And we actually like have retooled our infrastructure to focus on that use case, because it's so common for us to introduce new analytics to our customers, and like, the presentation layer is relatively straightforward. And so we actually are sunsetting, some pretty heavy infrastructure that we use to operate because it just doesn't, it was such a pain, like it's such a pain to work with. And in fact, we're not always working on Massive Datasets all of the time. A lot of times, it's like, we do a pretty good job filtering down to smaller like artisanal, small batch data and then running, like single machine computation. And it's a lot like the problems that machine learning problems are simpler once if we think about it in the right way. But there's not a lot of good tools for that kind of experimentation and prototyping. Yeah, you also know that's where the trend is going. This whole idea of big data, we need billions of records. Yeah, maybe. But nowadays, we see that, oh, it's transfer learning, we can actually train pretty good stuff on a piece full scale, and it works. Hey, no, cutting edge by market cutting on the market. Stop talking about that.
Like, that's super great, too. But like, but I agree with you. It's not even like necessarily just the training, which I agree with that completely. And then even that, once you have a model that's trained, then you're going to be operating on kind of production data to like make predictions or augment the data or season and are produced in a batch analytics, or whatever you're doing. That usually happens on a relatively small amount of data, but relatively speaking to like what we might think of as training data. And so many use cases are not all of them. But a lot of use cases, I think in a company is to about the everyday ones are in fact, just a little bit more straightforward. Yeah. Interesting. Cool. William, Matt, you guys got some ideas on where people might find some open space. One thing is there's a big difference between a really cool idea for something to build or a product and something you can actually make
A business around and sell. So it's good to think hard about how do you take, you know, the 20 different things you might do that all seem really neat and decide which one is most likely to be something that you could actually sell to people. Yeah, this thing looks cool. But what will they actually pay for it right? Without, you can't put your time to it co calc is a really, it's basically just this platform where we can basically do almost anything collaboratively with several people using it through a web browser. And so there's a million ideas for things we can add to it. And every day, we have to stop and say, Okay, what thing are we going to actually do? And then we have this kind of iterative process where we look at what people are asking for what people who will pay us or asking for, and then what the result should be to the platform overall. So we've thought more about just how to systematically build good stuff into cook, how to make it more valuable to our users, that we just iterate on that rather than having some of them were brand. New. Yeah, yeah. It's a strategy for improving the product that customers appreciate. Basically, yeah. Fantastic. Matt, how about you? Oh, final word on this one? Yeah, great. I'll give me like a general thought on starting companies and under like a civic, but general thing, like, no one knows what they're talking about. I am definitely not qualified to answer the question of like, how to build a company. I think everyone on this call, except for maybe Jonathan, like, this is our first time in this process. If I have that, right. No one knows what they're doing. So don't trust us. Also, like, look like we're the mildly successful people, most people fail. Given that I'll make my own. I'll make my prediction. So I just want to just interject. I do think it I mean, I do I get the point of like, oh, nobody knows what they're doing. But like, you know, some people do know what they're doing. You know, there's some stuff you you know, you do and you do well, and that's good. I mean, I think that there is something that we should you celebrate and honor that, like, I do think a lot of things were, you know, I know what I'm doing and other things where I'm like, Well, I don't know what
to expect. Yeah, they're like, we have a lot of broken noses from trying to run through walls for five years, man company work. I'm like, I've earned this broken nose.
Yeah, I really agree with that. Like, cuz, you know, you've made a whole bunch of really hard decisions that you spent months, maybe thinking about over the last five years, like we all have, and we're still alive, or companies are. So that says something, right? I guess maybe my point is, I now know how to make the company that I made, or I'm like, in the process of making, but like, I'm not sure how transferable my expertise is to someone else. Like we all like wandered through the forest. And we like hit a bunch of trees, like, Oh, great, we can find a clearing. But if someone else is in a forest, so know how to get to another clearing again. That being said, I'll give my like, my advice given that, like what I said about, like, they're always now like, there's only one platforms, I think those are kind of going away. I think a lot of companies are providing little specialized services, I think is actually a great need. And like integrating those services together. And integrating those products together. I think that there's a great need. And that's also like a great, that's an easy thing to get into. If you were just like start consultancy, shop and start integrating products in like some domain, maybe you're in finance, maybe you're in something else. Maybe you're in a scalable NLP, you can use explosion and coil at the same time. Like there's no company that can help you do that thing together. So I think that's maybe a place where I think people can start is in cobbling together all of these new sort of product. Yeah. And once you get into one of these verticals, you're like, you know what, there's this thing that everyone seems to struggle with. And now I'm in a position to really know the people and solve the problem. Yeah, and have people who've already paid me for it.
Because there's this startup wisdom, you have to schedule calls and talk to potential customers, but you never know what they're going to tell you. You could talk to someone's like, Hey, could you imagine buying this for me? And people would be like, Yeah, sure. And it doesn't mean anything. So yeah, but I would start I would start with this whole thing. I would start with integrating existing products, and then find that pain point that you hear 20 times. And then that's the point. Yeah. Let me close out the question from the audience here that I think it's relevant. magga come in, says question, how intimidating or the business skill side of things for all of you. We all told our stories, and we more or less started some technical aspect, and to varying degrees worked out payroll, taxes, investment, VC, all these things, but what are your thoughts? Sure, it depends on where you base to different countries have different, you know, situations, I do feel I can I did run, I was a freelancer before, which helped me a bit. I do take pride in, you know, being able to run my company and direct my company and do all these things and be on top of things. And I do think if you have that sort of mentality. Yeah, yeah, there's bureaucracy involved. That's just how it is, but also feels good to be able to really be on top of what you're doing. Yeah, I felt entirely unprepared. But I think your point there that you start with freelancing because you have to do a lot more of the tax payroll side just for yourself and then it grows Jonathan data interrupt you Not at all, I was gonna make a similar point that like the consequences for mistakes, as those consequences get more severe, you'll have more opportunity to pay your way out of the liability for it as you have to start to deal with
With like payroll from people in like different US states, or maybe even different countries and managing the tax implications and registering your business and like, all of that type of stuff, frankly, like even knowing how much tax you have to pay relative to how you operate your business, like those things are pretty complex, and you get over a number of certain employees. And then there's a whole new set of laws that apply to your business that didn't before protecting different classes of workers and stuff like that, which it gets really complicated. But now there are services that you can sign up for that manage almost like the entirety of that kind of like people operations. So for bigger business, the consequences are severe, but you can pay your way out of it. And when you're small like it's a bummer if you get a tax about one quarter that's
when I was a freelancer, I
always have at least an accountant like I do want to quit I'm not sitting here claiming that I do like literal payroll and accounting myself. I don't I hire someone to do it. But yeah, you still have to be on top of stuff like I do you think it's important to not just believe Oh, outsourcing all of that'd be fine. Yeah, yeah. Like I remember, like, I learned how to do it. And then I did, but you did pretty fast. But I agree. Like you can't, it's hard to it would be hard to hire somebody had you not done it yourself. Like he kind of like difficult to know, like how to outsource it. Yeah, actually even say, with lawyers, like people have this idea. You just hire a lawyer and they magically do everything for you. It's like, now you can't, you don't get good value out of a good lawyer, unless you actually know what you want and understand a bit of this stuff yourself. And then you can really utilize a professional to actually give the cover point, I think I went into the site the exact opposite experience of Venus, I did not want to own any of this process. Certainly, I've had to do a lot of this stuff. It's annoying, but like you can bait can buy your way out of it. Like we we got a PEO for for us employees immediately. They handle payroll taxes, it was great. We like got a high price lawyer who like helped walk us through a bunch of stuff. they handled Corp, they handled first contracts. It was great. We paid a bit of money, but that was fine. Yeah. And I think whether you have funding early in the thing, or you're completely trying to bootstrap, it can make a decision there as well. We're mostly bootstrapping. But we've always had one person whose job at the company was to do all this do the taxes and the payroll stuff. It's like the very first person who wanted to be an employee, instead of a consultant. I said, okay, but you have to set up the, you know, payroll stuff.
You got to figure out your own situation. And he was like, okay, that's now part of my job, when he got tired of it, somebody else took it over creative is very creative. They are things that are a non trivial amount of work. But it doesn't necessarily mean that you as the founder have to do that work. It could be somebody you hire. Yeah, and it's not that expensive. Now, the only thing that's related to this, for us, at least is that most of our customers are universities, and becoming a vendor with the University is a potentially complicated process, where they look at your terms of service and scratch off a whole bunch of things out other things. And they, they want to see all these like, audits of your internal systems, and they want to know that you have insurance for this and that it's like this endless sequence of hurdles involving 50 page, inscrutable documents and, and it can be the business friction involving doing business with universities can be utterly ridiculous. And that's been a lot of work for us for the last two years. Basically, it's worth pointing out though, that while there's lots of hurdles, they're all really short hurdles, like anybody can do this stuff. It's not like this doesn't require previous experience. Also, I think a hurdle becomes less of a hurdle. If you do have, for example, customers that really want your product. I was laughing when you talked about like, all the university purchasing process, because we obviously have University customers as well. We have large, very large companies. So we know the process. But for us, it's like, you know, it becomes a lot easier if you have the champion. And he was like, well, we want that suddenly, things work. You know, if you cold calling universities and trying to sell them, I'm sure that's going to be a different story. It's been really weird for us, because literally even today, we're dealing with stuff like this. But there's with hundreds of different universities we talked with, and they're all different. And they don't make their own rules. The rules are often state laws in the United States, at least, like in Texas to do business with one University have to pledge to not boycott Israel. That's just like a typical item in these like 50 page documents that you have to there's a huge amount of weird friction like that. Like, the state universities are the worst usually. Oh, my gosh. So I guess the takeaway, though, sounds like like there's just something, you learn it, you go through it. And now I hear on the other side of it. And it's great. Do it. Yeah. Fantastic. It's not as hard as creating a great product that people love. That's Yeah, that's for sure. We're exciting. I know. We could talk for another hour.
Thanks for being here. It's great to chat with you. Yeah. Thanks. Yep. Thank you. Thanks for having me on. Yeah.
This has been another episode of talk Python. To me. Our guests on this episode have been William Stein, Matthew Rocklin, Enos montagny. And Jonathan Morgan. It's been brought to you by century and linode. Take some stress out of your life. get notified immediately about errors in your web applications with century. Just visit talk python.fm slash century and get started for free and use the promo code python 2021. When you sign up, simplify your infrastructure and cut your cloud bill.
in half with linode Linux virtual machines develop, deploy and scale your modern applications faster and easier. Visit talk python.fm slash linode and click the Create free account button to get started. level up your Python we have one of the largest catalogs of Python video courses over at talk Python. Our content ranges from true beginners to deeply advanced topics like memory and async. And best of all, there's not a subscription insight. Check it out for yourself at training talk python.fm. Be sure to subscribe to the show, open your favorite podcast app and search for Python. We should be right at the top. You can also find the iTunes feed at slash iTunes, the Google Play feed at slash play and the direct RSS feed at slash RSS on talk python.fm. We're live streaming most of our recordings these days. If you want to be part of the show and have your comments featured on the air. Be sure to subscribe to our YouTube channel at talk python.fm slash YouTube. This is your host Michael Kennedy. Thanks so much for listening. I really appreciate it. Now get out there and write some Python code
